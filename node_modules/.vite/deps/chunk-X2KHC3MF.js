import {
  __export,
  __publicField
} from "./chunk-UVKRO5ER.js";

// node_modules/@strudel/core/dist/index.mjs
var dist_exports = {};
__export(dist_exports, {
  ClockCollator: () => Ie,
  Cyclist: () => bu,
  Fraction: () => h,
  Hap: () => S,
  Pattern: () => f,
  State: () => et,
  TimeSpan: () => T,
  __chooseWith: () => ue,
  _brandBy: () => ie,
  _fitslice: () => un,
  _irand: () => ce,
  _keyDown: () => le,
  _match: () => an,
  _mod: () => ut,
  _polymeterListSteps: () => pn,
  _retime: () => jt,
  _slices: () => Pt,
  accelerate: () => En,
  activeLabel: () => yo,
  ad: () => Sc,
  add: () => ca,
  adsr: () => Ac,
  almostAlways: () => pf,
  almostNever: () => lf,
  always: () => hf,
  amp: () => Pn,
  analyze: () => Un,
  anchor: () => Wo,
  and: () => Ta,
  apply: () => sl,
  ar: () => Cc,
  arrange: () => Du,
  as: () => Vc,
  att: () => $n,
  attack: () => Nn,
  averageArray: () => Te,
  backgroundImage: () => Ef,
  band: () => ha,
  bandf: () => rs,
  bandq: () => cs,
  bank: () => Qn,
  base64ToUnicode: () => We,
  bbexpr: () => _s,
  bbst: () => ks,
  beat: () => vp,
  begin: () => as,
  binary: () => Lp,
  binaryN: () => ru,
  bind: () => Yu,
  binshift: () => Di,
  bite: () => al,
  bjork: () => Uc,
  blshift: () => ya,
  bor: () => da,
  bp: () => is,
  bpa: () => er,
  bpattack: () => tr,
  bpd: () => cr,
  bpdecay: () => ir,
  bpe: () => Us,
  bpenv: () => Qs,
  bpf: () => os,
  bpq: () => us,
  bpr: () => br,
  bprelease: () => wr,
  bps: () => hr,
  bpsustain: () => fr,
  brak: () => bl,
  brand: () => Vp,
  brandBy: () => Fp,
  brshift: () => ga,
  bxor: () => ma,
  bypass: () => Il,
  byteBeatExpression: () => bs,
  byteBeatStartTime: () => vs,
  calculateSteps: () => Lu,
  cat: () => sn,
  ccn: () => Mc,
  ccv: () => Jc,
  ceil: () => za,
  ch: () => As,
  channel: () => $s,
  channels: () => qs,
  choose: () => Gp,
  chooseCycles: () => cu,
  chooseInWith: () => iu,
  chooseWith: () => xt,
  chop: () => fp,
  chord: () => $o,
  chunk: () => Pl,
  chunkBack: () => Rl,
  chunkback: () => Ll,
  clamp: () => Ee,
  cleanupUi: () => Mf,
  clip: () => rc,
  coarse: () => gs,
  code2hash: () => Nu,
  color: () => vc,
  colour: () => kc,
  comb: () => Ii,
  compose: () => zu,
  compress: () => $a,
  compressSpan: () => Ra,
  compressor: () => ci,
  compressorAttack: () => li,
  compressorKnee: () => ui,
  compressorRatio: () => ai,
  compressorRelease: () => pi,
  compressspan: () => La,
  constant: () => Eu,
  contract: () => gn,
  control: () => Ec,
  controls: () => kp,
  cosine: () => Bp,
  cosine2: () => Op,
  cpm: () => rl,
  cps: () => sc,
  createClock: () => Kc,
  createParam: () => qt,
  createParams: () => qc,
  crush: () => ys,
  ctf: () => Ws,
  ctlNum: () => jc,
  ctranspose: () => _o,
  curry: () => g,
  curve: () => ac,
  cut: () => Rs,
  cutoff: () => Ls,
  cycleToSeconds: () => Jt,
  dec: () => Yn,
  decay: () => Xn,
  degrade: () => tf,
  degradeBy: () => Zp,
  degradeByWith: () => Yp,
  degree: () => wo,
  delay: () => Pr,
  delayfb: () => $r,
  delayfeedback: () => Nr,
  delayt: () => Wr,
  delaytime: () => Lr,
  deltaSlide: () => lc,
  det: () => Vr,
  detune: () => Fr,
  dfb: () => Rr,
  dict: () => Lo,
  dictionary: () => Ro,
  dist: () => ii,
  distort: () => oi,
  div: () => la,
  djf: () => jr,
  drawLine: () => Ue,
  drive: () => ws,
  drop: () => dn,
  dry: () => Qr,
  ds: () => Tc,
  dt: () => Hr,
  dur: () => cc,
  duration: () => ic,
  early: () => ol,
  echo: () => Ol,
  echoWith: () => Tl,
  echowith: () => Cl,
  end: () => ls,
  enhance: () => Wi,
  eq: () => ka,
  eqt: () => qa,
  euclid: () => qp,
  euclidLegato: () => Tp,
  euclidLegatoRot: () => Cp,
  euclidRot: () => Sp,
  euclidrot: () => Ap,
  evalScope: () => mu,
  evaluate: () => gu,
  every: () => nl,
  expand: () => yn,
  expression: () => wi,
  extend: () => mn,
  fadeInTime: () => Xr,
  fadeOutTime: () => Kr,
  fadeTime: () => Ur,
  fanchor: () => vr,
  fast: () => Ga,
  fastChunk: () => Hl,
  fastGap: () => Wa,
  fastcat: () => W,
  fastchunk: () => Wl,
  fastgap: () => Ha,
  fft: () => Kn,
  filter: () => Ql,
  filterWhen: () => Ul,
  firstOf: () => el,
  fit: () => gp,
  flatten: () => Q,
  floor: () => Oa,
  fm: () => Wn,
  fmattack: () => In,
  fmdecay: () => Fn,
  fmenv: () => Hn,
  fmh: () => Rn,
  fmi: () => Ln,
  fmrelease: () => Dn,
  fmsustain: () => Vn,
  fmvelocity: () => Gn,
  focus: () => Ia,
  focusSpan: () => Fa,
  focusspan: () => Va,
  fractionalArgs: () => Mu,
  frameRate: () => Ui,
  frames: () => Ki,
  freeze: () => Pi,
  freq: () => Yr,
  freqToMidi: () => qe,
  fromBipolar: () => Ma,
  fshift: () => Ai,
  fshiftnote: () => Si,
  fshiftphase: () => Ti,
  ftype: () => _r,
  func: () => xa,
  gain: () => Jn,
  gap: () => st,
  gat: () => po,
  gate: () => lo,
  getControlName: () => Kt,
  getCurrentKeyboardState: () => De,
  getEventOffsetMs: () => Tu,
  getFreq: () => Ae,
  getFrequency: () => Ou,
  getPerformanceTimeSeconds: () => Ru,
  getPlayableNoteValue: () => Bu,
  getSoundIndex: () => xu,
  getTime: () => Of,
  getTrigger: () => _u,
  grow: () => Xl,
  gt: () => ba,
  gte: () => va,
  harmonic: () => vo,
  hash2code: () => $u,
  hbrick: () => Gi,
  hcutoff: () => xr,
  hold: () => ss,
  hours: () => Xi,
  hp: () => Or,
  hpa: () => Zs,
  hpattack: () => Ys,
  hpd: () => or,
  hpdecay: () => rr,
  hpe: () => Gs,
  hpenv: () => Ds,
  hpf: () => Br,
  hpq: () => Er,
  hpr: () => gr,
  hprelease: () => yr,
  hps: () => pr,
  hpsustain: () => lr,
  hresonance: () => zr,
  hsl: () => Gl,
  hsla: () => Dl,
  hurry: () => Ua,
  id: () => Z,
  imag: () => Li,
  inhabit: () => Af,
  inhabitmod: () => Tf,
  innerBind: () => Zu,
  inside: () => Ya,
  inv: () => yl,
  invert: () => ml,
  ir: () => Yo,
  irand: () => Dp,
  iresponse: () => Zo,
  isNote: () => wt,
  isNoteWithOctave: () => Au,
  isPattern: () => Dt,
  isaw: () => St,
  isaw2: () => te,
  iter: () => El,
  iterBack: () => Ml,
  iterback: () => Jl,
  itri: () => Jp,
  itri2: () => jp,
  jux: () => Sl,
  juxBy: () => ql,
  juxby: () => Al,
  kcutoff: () => Bi,
  keep: () => oa,
  keepif: () => ia,
  keyAlias: () => Ve,
  keyDown: () => mf,
  krush: () => xi,
  label: () => go,
  lastOf: () => tl,
  late: () => on,
  lbrick: () => Qi,
  legato: () => oc,
  leslie: () => fo,
  lfo: () => hc,
  linger: () => ll,
  listRange: () => Wt,
  lock: () => Ir,
  logKey: () => Lt,
  logger: () => E,
  loop: () => ps,
  loopAt: () => mp,
  loopAtCps: () => wp,
  loopBegin: () => fs,
  loopEnd: () => ds,
  loopat: () => yp,
  loopatcps: () => bp,
  loopb: () => hs,
  loope: () => ms,
  lp: () => Is,
  lpa: () => Xs,
  lpattack: () => Ks,
  lpd: () => sr,
  lpdecay: () => nr,
  lpe: () => Vs,
  lpenv: () => Fs,
  lpf: () => Hs,
  lpq: () => Jr,
  lpr: () => mr,
  lprelease: () => dr,
  lps: () => ar,
  lpsustain: () => ur,
  lrate: () => ho,
  lsize: () => mo,
  lt: () => wa,
  lte: () => _a,
  mapArgs: () => It,
  mask: () => Qu,
  midi2note: () => Cu,
  midiToFreq: () => tt,
  midibend: () => Hc,
  midichan: () => xc,
  midicmd: () => zc,
  midimap: () => Bc,
  midiport: () => Oc,
  miditouch: () => Ic,
  minutes: () => Yi,
  mod: () => pa,
  mode: () => Fo,
  mouseX: () => Rp,
  mouseY: () => Np,
  mousex: () => $p,
  mousey: () => Pp,
  mtranspose: () => bo,
  mul: () => aa,
  n: () => On,
  nanFallback: () => Ce,
  ne: () => Aa,
  net: () => Sa,
  never: () => ff,
  noise: () => Sr,
  note: () => zn,
  noteToMidi: () => ct,
  nothing: () => $,
  nrpnn: () => Pc,
  nrpv: () => Nc,
  nudge: () => Ao,
  numeralArgs: () => N,
  objectMap: () => He,
  octave: () => So,
  octaveR: () => qo,
  octaves: () => Io,
  octer: () => Oi,
  octersub: () => zi,
  octersubsub: () => Ei,
  off: () => wl,
  offset: () => Ho,
  often: () => uf,
  or: () => Ca,
  orbit: () => To,
  outerBind: () => ta,
  outside: () => Za,
  overgain: () => Co,
  overshape: () => xo,
  pace: () => ln,
  pairs: () => ze,
  palindrome: () => kl,
  pan: () => Bo,
  panchor: () => ao,
  panorient: () => Mo,
  panspan: () => Oo,
  pansplay: () => zo,
  panwidth: () => Eo,
  parseFractional: () => Oe,
  parseNumeral: () => Ht,
  partials: () => Hi,
  patt: () => to,
  pattack: () => Zr,
  pcurve: () => uo,
  pdec: () => no,
  pdecay: () => eo,
  penv: () => co,
  perlin: () => Xp,
  perlinWith: () => lu,
  ph: () => Bs,
  phasdp: () => Ns,
  phaser: () => Os,
  phasercenter: () => Ms,
  phaserdepth: () => js,
  phaserrate: () => xs,
  phasersweep: () => zs,
  phc: () => Js,
  phd: () => Ps,
  phs: () => Es,
  pick: () => pu,
  pickF: () => yf,
  pickOut: () => wf,
  pickReset: () => kf,
  pickRestart: () => _f,
  pickSqueeze: () => Sf,
  pickmod: () => hu,
  pickmodF: () => gf,
  pickmodOut: () => bf,
  pickmodReset: () => qf,
  pickmodRestart: () => vf,
  pickmodSqueeze: () => Cf,
  pipe: () => Be,
  pitchJump: () => pc,
  pitchJumpTime: () => fc,
  ply: () => Da,
  pm: () => Fu,
  polyBind: () => sa,
  polyTouch: () => Fc,
  polymeter: () => kt,
  polyrhythm: () => Hu,
  postgain: () => jn,
  pow: () => fa,
  pr: () => Iu,
  prel: () => io,
  prelease: () => oo,
  press: () => vl,
  pressBy: () => _l,
  progNum: () => $c,
  psus: () => ro,
  psustain: () => so,
  pure: () => j,
  pw: () => Ss,
  pwrate: () => Ts,
  pwsweep: () => Cs,
  rand: () => L,
  rand2: () => Ip,
  randcat: () => Qp,
  randrun: () => ou,
  range: () => Ja,
  range2: () => Pa,
  rangex: () => ja,
  rarely: () => af,
  rate: () => Jo,
  ratio: () => Na,
  rdim: () => Uo,
  real: () => Ri,
  ref: () => _p,
  register: () => l,
  registerControl: () => c,
  reify: () => d,
  rel: () => ns,
  release: () => es,
  removeUndefineds: () => nt,
  repeatCycles: () => jl,
  repeatTime: () => dc,
  repl: () => zf,
  resonance: () => Mr,
  rev: () => cn,
  rfade: () => Xo,
  rib: () => Vl,
  ribbon: () => Fl,
  ring: () => Mi,
  ringdf: () => ji,
  ringf: () => Ji,
  rlp: () => Go,
  room: () => Vo,
  roomdim: () => Qo,
  roomfade: () => Ko,
  roomlp: () => Do,
  roomsize: () => ti,
  rotate: () => xe,
  round: () => Ba,
  rsize: () => si,
  run: () => su,
  s: () => Tn,
  s_add: () => rp,
  s_alt: () => tp,
  s_cat: () => Zl,
  s_contract: () => up,
  s_expand: () => ip,
  s_extend: () => cp,
  s_polymeter: () => ep,
  s_sub: () => op,
  s_taper: () => np,
  s_taperlist: () => sp,
  s_tour: () => ap,
  s_zip: () => lp,
  saw: () => at,
  saw2: () => Zt,
  scram: () => Vi,
  scramble: () => Hp,
  scrub: () => Dc,
  seconds: () => Zi,
  seg: () => fl,
  segment: () => pl,
  semitone: () => Po,
  seq: () => rn,
  seqPLoop: () => Gu,
  sequence: () => V,
  sequenceP: () => Ze,
  set: () => ra,
  setStringParser: () => Wu,
  setTime: () => Rt,
  shape: () => ri,
  shrink: () => bn,
  shrinklist: () => wn,
  shuffle: () => Wp,
  signal: () => H,
  silence: () => q,
  sine: () => Xc,
  sine2: () => ee,
  size: () => ei,
  slice: () => qn,
  slide: () => jo,
  slow: () => Ka,
  slowChunk: () => $l,
  slowcat: () => K,
  slowcatPrime: () => Gt,
  slowchunk: () => Nl,
  smear: () => Fi,
  sol2note: () => Ju,
  someCycles: () => cf,
  someCyclesBy: () => of,
  sometimes: () => rf,
  sometimesBy: () => sf,
  songPtr: () => tc,
  sound: () => Cn,
  source: () => xn,
  sparsity: () => Xa,
  speak: () => Bf,
  speed: () => Ut,
  splice: () => dp,
  splitAt: () => Ft,
  spread: () => Gr,
  square: () => Yc,
  square2: () => zp,
  squeeze: () => xf,
  squeezeBind: () => ea,
  squiz: () => di,
  src: () => Bn,
  stack: () => C,
  stackBy: () => Vu,
  stackCentre: () => nn,
  stackLeft: () => tn,
  stackRight: () => en,
  steady: () => xp,
  stepBind: () => na,
  stepalt: () => fn,
  stepcat: () => J,
  steps: () => pp,
  stepsPerOctave: () => ko,
  stretch: () => fi,
  striate: () => hp,
  struct: () => Uu,
  stut: () => zl,
  stutWith: () => xl,
  stutwith: () => Bl,
  sub: () => ua,
  superimpose: () => Ku,
  sus: () => ts,
  sustain: () => Zn,
  sustainpedal: () => bi,
  swing: () => dl,
  swingBy: () => hl,
  sysex: () => Rc,
  sysexdata: () => Wc,
  sysexid: () => Lc,
  sz: () => ni,
  take: () => hn,
  time: () => Zc,
  timeCat: () => kn,
  timecat: () => Yl,
  toBipolar: () => Ea,
  tokenizeNote: () => _e,
  tour: () => _n,
  tremdp: () => vi,
  tremolo: () => bc,
  tremolodepth: () => _i,
  tremolorate: () => ki,
  tremr: () => qi,
  tri: () => Ep,
  tri2: () => Mp,
  triode: () => Ci,
  tsdelay: () => $i,
  uid: () => ec,
  undegrade: () => nf,
  undegradeBy: () => ef,
  unicodeToBase64: () => Le,
  uniq: () => ju,
  uniqsort: () => Pu,
  uniqsortr: () => Re,
  unison: () => Dr,
  unit: () => hi,
  v: () => Ar,
  val: () => nc,
  valueToMidi: () => Su,
  velocity: () => Mn,
  vib: () => kr,
  vibmod: () => Tr,
  vibrato: () => qr,
  vmod: () => Cr,
  voice: () => No,
  vowel: () => mi,
  waveloss: () => yi,
  wchoose: () => Up,
  wchooseCycles: () => au,
  when: () => gl,
  whenKey: () => df,
  withValue: () => Xu,
  within: () => Kl,
  wrandcat: () => Kp,
  xfade: () => An,
  xsdelay: () => Ni,
  zcrush: () => gc,
  zdelay: () => wc,
  zip: () => vn,
  zipWith: () => Vt,
  zmod: () => yc,
  znoise: () => mc,
  zoom: () => il,
  zoomArc: () => cl,
  zoomarc: () => ul,
  zrand: () => uc,
  zzfx: () => _c
});

// node_modules/fraction.js/dist/fraction.mjs
if (typeof BigInt === "undefined") BigInt = function(n) {
  if (isNaN(n)) throw new Error("");
  return n;
};
var C_ZERO = BigInt(0);
var C_ONE = BigInt(1);
var C_TWO = BigInt(2);
var C_FIVE = BigInt(5);
var C_TEN = BigInt(10);
var MAX_CYCLE_LEN = 2e3;
var P = {
  "s": C_ONE,
  "n": C_ZERO,
  "d": C_ONE
};
function assign(n, s) {
  try {
    n = BigInt(n);
  } catch (e) {
    throw InvalidParameter();
  }
  return n * s;
}
function trunc(x) {
  return typeof x === "bigint" ? x : Math.floor(x);
}
function newFraction(n, d2) {
  if (d2 === C_ZERO) {
    throw DivisionByZero();
  }
  const f2 = Object.create(Fraction.prototype);
  f2["s"] = n < C_ZERO ? -C_ONE : C_ONE;
  n = n < C_ZERO ? -n : n;
  const a = gcd(n, d2);
  f2["n"] = n / a;
  f2["d"] = d2 / a;
  return f2;
}
function factorize(num) {
  const factors = {};
  let n = num;
  let i = C_TWO;
  let s = C_FIVE - C_ONE;
  while (s <= n) {
    while (n % i === C_ZERO) {
      n /= i;
      factors[i] = (factors[i] || C_ZERO) + C_ONE;
    }
    s += C_ONE + C_TWO * i++;
  }
  if (n !== num) {
    if (n > 1)
      factors[n] = (factors[n] || C_ZERO) + C_ONE;
  } else {
    factors[num] = (factors[num] || C_ZERO) + C_ONE;
  }
  return factors;
}
var parse = function(p1, p2) {
  let n = C_ZERO, d2 = C_ONE, s = C_ONE;
  if (p1 === void 0 || p1 === null) {
  } else if (p2 !== void 0) {
    if (typeof p1 === "bigint") {
      n = p1;
    } else if (isNaN(p1)) {
      throw InvalidParameter();
    } else if (p1 % 1 !== 0) {
      throw NonIntegerParameter();
    } else {
      n = BigInt(p1);
    }
    if (typeof p2 === "bigint") {
      d2 = p2;
    } else if (isNaN(p2)) {
      throw InvalidParameter();
    } else if (p2 % 1 !== 0) {
      throw NonIntegerParameter();
    } else {
      d2 = BigInt(p2);
    }
    s = n * d2;
  } else if (typeof p1 === "object") {
    if ("d" in p1 && "n" in p1) {
      n = BigInt(p1["n"]);
      d2 = BigInt(p1["d"]);
      if ("s" in p1)
        n *= BigInt(p1["s"]);
    } else if (0 in p1) {
      n = BigInt(p1[0]);
      if (1 in p1)
        d2 = BigInt(p1[1]);
    } else if (typeof p1 === "bigint") {
      n = p1;
    } else {
      throw InvalidParameter();
    }
    s = n * d2;
  } else if (typeof p1 === "number") {
    if (isNaN(p1)) {
      throw InvalidParameter();
    }
    if (p1 < 0) {
      s = -C_ONE;
      p1 = -p1;
    }
    if (p1 % 1 === 0) {
      n = BigInt(p1);
    } else {
      let z = 1;
      let A = 0, B = 1;
      let C2 = 1, D = 1;
      let N2 = 1e7;
      if (p1 >= 1) {
        z = 10 ** Math.floor(1 + Math.log10(p1));
        p1 /= z;
      }
      while (B <= N2 && D <= N2) {
        let M = (A + C2) / (B + D);
        if (p1 === M) {
          if (B + D <= N2) {
            n = A + C2;
            d2 = B + D;
          } else if (D > B) {
            n = C2;
            d2 = D;
          } else {
            n = A;
            d2 = B;
          }
          break;
        } else {
          if (p1 > M) {
            A += C2;
            B += D;
          } else {
            C2 += A;
            D += B;
          }
          if (B > N2) {
            n = C2;
            d2 = D;
          } else {
            n = A;
            d2 = B;
          }
        }
      }
      n = BigInt(n) * BigInt(z);
      d2 = BigInt(d2);
    }
  } else if (typeof p1 === "string") {
    let ndx = 0;
    let v = C_ZERO, w = C_ZERO, x = C_ZERO, y = C_ONE, z = C_ONE;
    let match = p1.replace(/_/g, "").match(/\d+|./g);
    if (match === null)
      throw InvalidParameter();
    if (match[ndx] === "-") {
      s = -C_ONE;
      ndx++;
    } else if (match[ndx] === "+") {
      ndx++;
    }
    if (match.length === ndx + 1) {
      w = assign(match[ndx++], s);
    } else if (match[ndx + 1] === "." || match[ndx] === ".") {
      if (match[ndx] !== ".") {
        v = assign(match[ndx++], s);
      }
      ndx++;
      if (ndx + 1 === match.length || match[ndx + 1] === "(" && match[ndx + 3] === ")" || match[ndx + 1] === "'" && match[ndx + 3] === "'") {
        w = assign(match[ndx], s);
        y = C_TEN ** BigInt(match[ndx].length);
        ndx++;
      }
      if (match[ndx] === "(" && match[ndx + 2] === ")" || match[ndx] === "'" && match[ndx + 2] === "'") {
        x = assign(match[ndx + 1], s);
        z = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;
        ndx += 3;
      }
    } else if (match[ndx + 1] === "/" || match[ndx + 1] === ":") {
      w = assign(match[ndx], s);
      y = assign(match[ndx + 2], C_ONE);
      ndx += 3;
    } else if (match[ndx + 3] === "/" && match[ndx + 1] === " ") {
      v = assign(match[ndx], s);
      w = assign(match[ndx + 2], s);
      y = assign(match[ndx + 4], C_ONE);
      ndx += 5;
    }
    if (match.length <= ndx) {
      d2 = y * z;
      s = /* void */
      n = x + d2 * v + z * w;
    } else {
      throw InvalidParameter();
    }
  } else if (typeof p1 === "bigint") {
    n = p1;
    s = p1;
    d2 = C_ONE;
  } else {
    throw InvalidParameter();
  }
  if (d2 === C_ZERO) {
    throw DivisionByZero();
  }
  P["s"] = s < C_ZERO ? -C_ONE : C_ONE;
  P["n"] = n < C_ZERO ? -n : n;
  P["d"] = d2 < C_ZERO ? -d2 : d2;
};
function modpow(b, e, m) {
  let r = C_ONE;
  for (; e > C_ZERO; b = b * b % m, e >>= C_ONE) {
    if (e & C_ONE) {
      r = r * b % m;
    }
  }
  return r;
}
function cycleLen(n, d2) {
  for (; d2 % C_TWO === C_ZERO; d2 /= C_TWO) {
  }
  for (; d2 % C_FIVE === C_ZERO; d2 /= C_FIVE) {
  }
  if (d2 === C_ONE)
    return C_ZERO;
  let rem = C_TEN % d2;
  let t = 1;
  for (; rem !== C_ONE; t++) {
    rem = rem * C_TEN % d2;
    if (t > MAX_CYCLE_LEN)
      return C_ZERO;
  }
  return BigInt(t);
}
function cycleStart(n, d2, len) {
  let rem1 = C_ONE;
  let rem2 = modpow(C_TEN, len, d2);
  for (let t = 0; t < 300; t++) {
    if (rem1 === rem2)
      return BigInt(t);
    rem1 = rem1 * C_TEN % d2;
    rem2 = rem2 * C_TEN % d2;
  }
  return 0;
}
function gcd(a, b) {
  if (!a)
    return b;
  if (!b)
    return a;
  while (1) {
    a %= b;
    if (!a)
      return b;
    b %= a;
    if (!b)
      return a;
  }
}
function Fraction(a, b) {
  parse(a, b);
  if (this instanceof Fraction) {
    a = gcd(P["d"], P["n"]);
    this["s"] = P["s"];
    this["n"] = P["n"] / a;
    this["d"] = P["d"] / a;
  } else {
    return newFraction(P["s"] * P["n"], P["d"]);
  }
}
var DivisionByZero = function() {
  return new Error("Division by Zero");
};
var InvalidParameter = function() {
  return new Error("Invalid argument");
};
var NonIntegerParameter = function() {
  return new Error("Parameters must be integer");
};
Fraction.prototype = {
  "s": C_ONE,
  "n": C_ZERO,
  "d": C_ONE,
  /**
   * Calculates the absolute value
   *
   * Ex: new Fraction(-4).abs() => 4
   **/
  "abs": function() {
    return newFraction(this["n"], this["d"]);
  },
  /**
   * Inverts the sign of the current fraction
   *
   * Ex: new Fraction(-4).neg() => 4
   **/
  "neg": function() {
    return newFraction(-this["s"] * this["n"], this["d"]);
  },
  /**
   * Adds two rational numbers
   *
   * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
   **/
  "add": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Subtracts two rational numbers
   *
   * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
   **/
  "sub": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Multiplies two rational numbers
   *
   * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
   **/
  "mul": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * P["s"] * this["n"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Divides two rational numbers
   *
   * Ex: new Fraction("-17.(345)").inverse().div(3)
   **/
  "div": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * P["s"] * this["n"] * P["d"],
      this["d"] * P["n"]
    );
  },
  /**
   * Clones the actual object
   *
   * Ex: new Fraction("-17.(345)").clone()
   **/
  "clone": function() {
    return newFraction(this["s"] * this["n"], this["d"]);
  },
  /**
   * Calculates the modulo of two rational numbers - a more precise fmod
   *
   * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
   * Ex: new Fraction(20, 10).mod().equals(0) ? "is Integer"
   **/
  "mod": function(a, b) {
    if (a === void 0) {
      return newFraction(this["s"] * this["n"] % this["d"], C_ONE);
    }
    parse(a, b);
    if (C_ZERO === P["n"] * this["d"]) {
      throw DivisionByZero();
    }
    return newFraction(
      this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
      P["d"] * this["d"]
    );
  },
  /**
   * Calculates the fractional gcd of two rational numbers
   *
   * Ex: new Fraction(5,8).gcd(3,7) => 1/56
   */
  "gcd": function(a, b) {
    parse(a, b);
    return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
  },
  /**
   * Calculates the fractional lcm of two rational numbers
   *
   * Ex: new Fraction(5,8).lcm(3,7) => 15
   */
  "lcm": function(a, b) {
    parse(a, b);
    if (P["n"] === C_ZERO && this["n"] === C_ZERO) {
      return newFraction(C_ZERO, C_ONE);
    }
    return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
  },
  /**
   * Gets the inverse of the fraction, means numerator and denominator are exchanged
   *
   * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
   **/
  "inverse": function() {
    return newFraction(this["s"] * this["d"], this["n"]);
  },
  /**
   * Calculates the fraction to some integer exponent
   *
   * Ex: new Fraction(-1,2).pow(-3) => -8
   */
  "pow": function(a, b) {
    parse(a, b);
    if (P["d"] === C_ONE) {
      if (P["s"] < C_ZERO) {
        return newFraction((this["s"] * this["d"]) ** P["n"], this["n"] ** P["n"]);
      } else {
        return newFraction((this["s"] * this["n"]) ** P["n"], this["d"] ** P["n"]);
      }
    }
    if (this["s"] < C_ZERO) return null;
    let N2 = factorize(this["n"]);
    let D = factorize(this["d"]);
    let n = C_ONE;
    let d2 = C_ONE;
    for (let k in N2) {
      if (k === "1") continue;
      if (k === "0") {
        n = C_ZERO;
        break;
      }
      N2[k] *= P["n"];
      if (N2[k] % P["d"] === C_ZERO) {
        N2[k] /= P["d"];
      } else return null;
      n *= BigInt(k) ** N2[k];
    }
    for (let k in D) {
      if (k === "1") continue;
      D[k] *= P["n"];
      if (D[k] % P["d"] === C_ZERO) {
        D[k] /= P["d"];
      } else return null;
      d2 *= BigInt(k) ** D[k];
    }
    if (P["s"] < C_ZERO) {
      return newFraction(d2, n);
    }
    return newFraction(n, d2);
  },
  /**
   * Calculates the logarithm of a fraction to a given rational base
   *
   * Ex: new Fraction(27, 8).log(9, 4) => 3/2
   */
  "log": function(a, b) {
    parse(a, b);
    if (this["s"] <= C_ZERO || P["s"] <= C_ZERO) return null;
    const allPrimes = {};
    const baseFactors = factorize(P["n"]);
    const T1 = factorize(P["d"]);
    const numberFactors = factorize(this["n"]);
    const T2 = factorize(this["d"]);
    for (const prime in T1) {
      baseFactors[prime] = (baseFactors[prime] || C_ZERO) - T1[prime];
    }
    for (const prime in T2) {
      numberFactors[prime] = (numberFactors[prime] || C_ZERO) - T2[prime];
    }
    for (const prime in baseFactors) {
      if (prime === "1") continue;
      allPrimes[prime] = true;
    }
    for (const prime in numberFactors) {
      if (prime === "1") continue;
      allPrimes[prime] = true;
    }
    let retN = null;
    let retD = null;
    for (const prime in allPrimes) {
      const baseExponent = baseFactors[prime] || C_ZERO;
      const numberExponent = numberFactors[prime] || C_ZERO;
      if (baseExponent === C_ZERO) {
        if (numberExponent !== C_ZERO) {
          return null;
        }
        continue;
      }
      let curN = numberExponent;
      let curD = baseExponent;
      const gcdValue = gcd(curN, curD);
      curN /= gcdValue;
      curD /= gcdValue;
      if (retN === null && retD === null) {
        retN = curN;
        retD = curD;
      } else if (curN * retD !== retN * curD) {
        return null;
      }
    }
    return retN !== null && retD !== null ? newFraction(retN, retD) : null;
  },
  /**
   * Check if two rational numbers are the same
   *
   * Ex: new Fraction(19.6).equals([98, 5]);
   **/
  "equals": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is less than another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "lt": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] < P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is less than or equal another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "lte": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] <= P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is greater than another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "gt": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] > P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is greater than or equal another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "gte": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] >= P["s"] * P["n"] * this["d"];
  },
  /**
   * Compare two rational numbers
   * < 0 iff this < that
   * > 0 iff this > that
   * = 0 iff this = that
   *
   * Ex: new Fraction(19.6).compare([98, 5]);
   **/
  "compare": function(a, b) {
    parse(a, b);
    let t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
    return (C_ZERO < t) - (t < C_ZERO);
  },
  /**
   * Calculates the ceil of a rational number
   *
   * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
   **/
  "ceil": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      trunc(this["s"] * places * this["n"] / this["d"]) + (places * this["n"] % this["d"] > C_ZERO && this["s"] >= C_ZERO ? C_ONE : C_ZERO),
      places
    );
  },
  /**
   * Calculates the floor of a rational number
   *
   * Ex: new Fraction('4.(3)').floor() => (4 / 1)
   **/
  "floor": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      trunc(this["s"] * places * this["n"] / this["d"]) - (places * this["n"] % this["d"] > C_ZERO && this["s"] < C_ZERO ? C_ONE : C_ZERO),
      places
    );
  },
  /**
   * Rounds a rational numbers
   *
   * Ex: new Fraction('4.(3)').round() => (4 / 1)
   **/
  "round": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      trunc(this["s"] * places * this["n"] / this["d"]) + this["s"] * ((this["s"] >= C_ZERO ? C_ONE : C_ZERO) + C_TWO * (places * this["n"] % this["d"]) > this["d"] ? C_ONE : C_ZERO),
      places
    );
  },
  /**
    * Rounds a rational number to a multiple of another rational number
    *
    * Ex: new Fraction('0.9').roundTo("1/8") => 7 / 8
    **/
  "roundTo": function(a, b) {
    parse(a, b);
    const n = this["n"] * P["d"];
    const d2 = this["d"] * P["n"];
    const r = n % d2;
    let k = trunc(n / d2);
    if (r + r >= d2) {
      k++;
    }
    return newFraction(this["s"] * k * P["n"], P["d"]);
  },
  /**
   * Check if two rational numbers are divisible
   *
   * Ex: new Fraction(19.6).divisible(1.5);
   */
  "divisible": function(a, b) {
    parse(a, b);
    return !(!(P["n"] * this["d"]) || this["n"] * P["d"] % (P["n"] * this["d"]));
  },
  /**
   * Returns a decimal representation of the fraction
   *
   * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
   **/
  "valueOf": function() {
    return Number(this["s"] * this["n"]) / Number(this["d"]);
  },
  /**
   * Creates a string representation of a fraction with all digits
   *
   * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
   **/
  "toString": function(dec) {
    let N2 = this["n"];
    let D = this["d"];
    dec = dec || 15;
    let cycLen = cycleLen(N2, D);
    let cycOff = cycleStart(N2, D, cycLen);
    let str = this["s"] < C_ZERO ? "-" : "";
    str += trunc(N2 / D);
    N2 %= D;
    N2 *= C_TEN;
    if (N2)
      str += ".";
    if (cycLen) {
      for (let i = cycOff; i--; ) {
        str += trunc(N2 / D);
        N2 %= D;
        N2 *= C_TEN;
      }
      str += "(";
      for (let i = cycLen; i--; ) {
        str += trunc(N2 / D);
        N2 %= D;
        N2 *= C_TEN;
      }
      str += ")";
    } else {
      for (let i = dec; N2 && i--; ) {
        str += trunc(N2 / D);
        N2 %= D;
        N2 *= C_TEN;
      }
    }
    return str;
  },
  /**
   * Returns a string-fraction representation of a Fraction object
   *
   * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
   **/
  "toFraction": function(showMixed) {
    let n = this["n"];
    let d2 = this["d"];
    let str = this["s"] < C_ZERO ? "-" : "";
    if (d2 === C_ONE) {
      str += n;
    } else {
      let whole = trunc(n / d2);
      if (showMixed && whole > C_ZERO) {
        str += whole;
        str += " ";
        n %= d2;
      }
      str += n;
      str += "/";
      str += d2;
    }
    return str;
  },
  /**
   * Returns a latex representation of a Fraction object
   *
   * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
   **/
  "toLatex": function(showMixed) {
    let n = this["n"];
    let d2 = this["d"];
    let str = this["s"] < C_ZERO ? "-" : "";
    if (d2 === C_ONE) {
      str += n;
    } else {
      let whole = trunc(n / d2);
      if (showMixed && whole > C_ZERO) {
        str += whole;
        n %= d2;
      }
      str += "\\frac{";
      str += n;
      str += "}{";
      str += d2;
      str += "}";
    }
    return str;
  },
  /**
   * Returns an array of continued fraction elements
   *
   * Ex: new Fraction("7/8").toContinued() => [0,1,7]
   */
  "toContinued": function() {
    let a = this["n"];
    let b = this["d"];
    let res = [];
    do {
      res.push(trunc(a / b));
      let t = a % b;
      a = b;
      b = t;
    } while (a !== C_ONE);
    return res;
  },
  "simplify": function(eps) {
    const ieps = BigInt(1 / (eps || 1e-3) | 0);
    const thisABS = this["abs"]();
    const cont = thisABS["toContinued"]();
    for (let i = 1; i < cont.length; i++) {
      let s = newFraction(cont[i - 1], C_ONE);
      for (let k = i - 2; k >= 0; k--) {
        s = s["inverse"]()["add"](cont[k]);
      }
      let t = s["sub"](thisABS);
      if (t["n"] * ieps < t["d"]) {
        return s["mul"](this["s"]);
      }
    }
    return this;
  }
};

// node_modules/@strudel/core/dist/index.mjs
var Lt = "strudel.log";
var be = 1e3;
var Et;
var Mt;
function E(t, e, n = {}) {
  let s = performance.now();
  Et === t && s - Mt < be || (Et = t, Mt = s, console.log(`%c${t}`, "background-color: black;color:white;border-radius:15px"), typeof document < "u" && typeof CustomEvent < "u" && document.dispatchEvent(
    new CustomEvent(Lt, {
      detail: {
        message: t,
        type: e,
        data: n
      }
    })
  ));
}
E.key = Lt;
var Au = (t) => /^[a-gA-G][#bs]*[0-9]$/.test(t);
var wt = (t) => /^[a-gA-G][#bsf]*[0-9]?$/.test(t);
var _e = (t) => {
  var _a2;
  if (typeof t != "string")
    return [];
  const [e, n = "", s] = ((_a2 = t.match(/^([a-gA-G])([#bsf]*)([0-9]*)$/)) == null ? void 0 : _a2.slice(1)) || [];
  return e ? [e, n, s ? Number(s) : void 0] : [];
};
var ve = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11 };
var ke = { "#": 1, b: -1, s: 1, f: -1 };
var ct = (t, e = 3) => {
  const [n, s, r = e] = _e(t);
  if (!n)
    throw new Error('not a note: "' + t + '"');
  const o = ve[n.toLowerCase()], i = (s == null ? void 0 : s.split("").reduce((u, a) => u + ke[a], 0)) || 0;
  return (Number(r) + 1) * 12 + o + i;
};
var tt = (t) => Math.pow(2, (t - 69) / 12) * 440;
var qe = (t) => 12 * Math.log(t / 440) / Math.LN2 + 69;
var Su = (t, e) => {
  if (typeof t != "object")
    throw new Error("valueToMidi: expected object value");
  let { freq: n, note: s } = t;
  if (typeof n == "number")
    return qe(n);
  if (typeof s == "string")
    return ct(s);
  if (typeof s == "number")
    return s;
  if (!e)
    throw new Error("valueToMidi: expected freq or note to be set");
  return e;
};
var Tu = (t, e) => (t - e) * 1e3;
var Ae = (t) => tt(typeof t == "number" ? t : ct(t));
var Se = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
var Cu = (t) => {
  const e = Math.floor(t / 12) - 1;
  return Se[t % 12] + e;
};
var ut = (t, e) => (t % e + e) % e;
var Te = (t) => t.reduce((e, n) => e + n) / t.length;
function Ce(t, e = 0) {
  return isNaN(Number(t)) ? (E(`"${t}" is not a number, falling back to ${e}`, "warning"), e) : t;
}
var xu = (t, e) => ut(Math.round(Ce(t ?? 0, 0)), e);
var Bu = (t) => {
  let { value: e, context: n } = t, s = e;
  if (typeof s == "object" && !Array.isArray(s) && (s = s.note || s.n || s.value, s === void 0))
    throw new Error(`cannot find a playable note for ${JSON.stringify(e)}`);
  if (typeof s == "number" && n.type !== "frequency")
    s = tt(t.value);
  else if (typeof s == "number" && n.type === "frequency")
    s = t.value;
  else if (typeof s != "string" || !wt(s))
    throw new Error("not a note: " + JSON.stringify(s));
  return s;
};
var Ou = (t) => {
  let { value: e, context: n } = t;
  if (typeof e == "object")
    return e.freq ? e.freq : Ae(e.note || e.n || e.value);
  if (typeof e == "number" && n.type !== "frequency")
    e = tt(t.value);
  else if (typeof e == "string" && wt(e))
    e = tt(ct(t.value));
  else if (typeof e != "number")
    throw new Error("not a note or frequency: " + e);
  return e;
};
var xe = (t, e) => t.slice(e).concat(t.slice(0, e));
var Be = (...t) => t.reduce(
  (e, n) => (...s) => e(n(...s)),
  (e) => e
);
var zu = (...t) => Be(...t.reverse());
var nt = (t) => t.filter((e) => e != null);
var Q = (t) => [].concat(...t);
var Z = (t) => t;
var Eu = (t, e) => t;
var Wt = (t, e) => Array.from({ length: e - t + 1 }, (n, s) => s + t);
function g(t, e, n = t.length) {
  const s = function r(...o) {
    if (o.length >= n)
      return t.apply(this, o);
    {
      const i = function(...u) {
        return r.apply(this, o.concat(u));
      };
      return e && e(i, o), i;
    }
  };
  return e && e(s, []), s;
}
function Ht(t) {
  const e = Number(t);
  if (!isNaN(e))
    return e;
  if (wt(t))
    return ct(t);
  throw new Error(`cannot parse as numeral: "${t}"`);
}
function It(t, e) {
  return (...n) => t(...n.map(e));
}
function N(t) {
  return It(t, Ht);
}
function Oe(t) {
  const e = Number(t);
  if (!isNaN(e))
    return e;
  const n = {
    pi: Math.PI,
    w: 1,
    h: 0.5,
    q: 0.25,
    e: 0.125,
    s: 0.0625,
    t: 1 / 3,
    f: 0.2,
    x: 1 / 6
  }[t];
  if (typeof n < "u")
    return n;
  throw new Error(`cannot parse as fractional: "${t}"`);
}
var Mu = (t) => It(t, Oe);
var Ft = function(t, e) {
  return [e.slice(0, t), e.slice(t)];
};
var Vt = (t, e, n) => e.map((s, r) => t(s, n[r]));
var ze = function(t) {
  const e = [];
  for (let n = 0; n < t.length - 1; ++n)
    e.push([t[n], t[n + 1]]);
  return e;
};
var Ee = (t, e, n) => Math.min(Math.max(t, e), n);
var Me = ["Do", "Reb", "Re", "Mib", "Mi", "Fa", "Solb", "Sol", "Lab", "La", "Sib", "Si"];
var Je = [
  "Sa",
  "Re",
  "Ga",
  "Ma",
  "Pa",
  "Dha",
  "Ni"
];
var je = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Hb", "H"];
var Pe = [
  "Ni",
  "Pab",
  "Pa",
  "Voub",
  "Vou",
  "Ga",
  "Dib",
  "Di",
  "Keb",
  "Ke",
  "Zob",
  "Zo"
];
var Ne = [
  "I",
  "Ro",
  "Ha",
  "Ni",
  "Ho",
  "He",
  "To"
];
var $e = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
var Ju = (t, e = "letters") => {
  const s = (e === "solfeggio" ? Me : e === "indian" ? Je : e === "german" ? je : e === "byzantine" ? Pe : e === "japanese" ? Ne : $e)[t % 12], r = Math.floor(t / 12) - 1;
  return s + r;
};
function ju(t) {
  var e = {};
  return t.filter(function(n) {
    return e.hasOwn(n) ? false : e[n] = true;
  });
}
function Pu(t) {
  return t.sort().filter(function(e, n, s) {
    return !n || e != s[n - 1];
  });
}
function Re(t) {
  return t.sort((e, n) => e.compare(n)).filter(function(e, n, s) {
    return !n || e.ne(s[n - 1]);
  });
}
function Le(t) {
  const e = new TextEncoder().encode(t);
  return btoa(String.fromCharCode(...e));
}
function We(t) {
  const e = new Uint8Array(
    atob(t).split("").map((s) => s.charCodeAt(0))
  );
  return new TextDecoder().decode(e);
}
function Nu(t) {
  return encodeURIComponent(Le(t));
}
function $u(t) {
  return We(decodeURIComponent(t));
}
function He(t, e) {
  return Array.isArray(t) ? t.map(e) : Object.fromEntries(Object.entries(t).map(([n, s], r) => [n, e(s, n, r)]));
}
function Jt(t, e) {
  return t / e;
}
var Ie = class {
  constructor({
    getTargetClockTime: e = Fe,
    weight: n = 16,
    offsetDelta: s = 5e-3,
    checkAfterTime: r = 2,
    resetAfterTime: o = 8
  }) {
    this.offsetTime, this.timeAtPrevOffsetSample, this.prevOffsetTimes = [], this.getTargetClockTime = e, this.weight = n, this.offsetDelta = s, this.checkAfterTime = r, this.resetAfterTime = o, this.reset = () => {
      this.prevOffsetTimes = [], this.offsetTime = null, this.timeAtPrevOffsetSample = null;
    };
  }
  calculateOffset(e) {
    const n = this.getTargetClockTime(), s = n - this.timeAtPrevOffsetSample, r = n - e;
    if (s > this.resetAfterTime && this.reset(), this.offsetTime == null && (this.offsetTime = r), this.prevOffsetTimes.push(r), this.prevOffsetTimes.length > this.weight && this.prevOffsetTimes.shift(), this.timeAtPrevOffsetSample == null || s > this.checkAfterTime) {
      this.timeAtPrevOffsetSample = n;
      const o = Te(this.prevOffsetTimes);
      Math.abs(o - this.offsetTime) > this.offsetDelta && (this.offsetTime = o);
    }
    return this.offsetTime;
  }
  calculateTimestamp(e, n) {
    return this.calculateOffset(e) + n;
  }
};
function Ru() {
  return performance.now() * 1e-3;
}
function Fe() {
  return Date.now() * 1e-3;
}
var Ve = /* @__PURE__ */ new Map([
  ["control", "Control"],
  ["ctrl", "Control"],
  ["alt", "Alt"],
  ["shift", "Shift"],
  ["down", "ArrowDown"],
  ["up", "ArrowUp"],
  ["left", "ArrowLeft"],
  ["right", "ArrowRight"]
]);
var Y;
function De() {
  if (Y == null) {
    if (typeof window > "u")
      return;
    Y = {}, window.addEventListener("keydown", (t) => {
      Y[t.key] = true;
    }), window.addEventListener("keyup", (t) => {
      Y[t.key] = false;
    });
  }
  return { ...Y };
}
Fraction.prototype.sam = function() {
  return this.floor();
};
Fraction.prototype.nextSam = function() {
  return this.sam().add(1);
};
Fraction.prototype.wholeCycle = function() {
  return new T(this.sam(), this.nextSam());
};
Fraction.prototype.cyclePos = function() {
  return this.sub(this.sam());
};
Fraction.prototype.lt = function(t) {
  return this.compare(t) < 0;
};
Fraction.prototype.gt = function(t) {
  return this.compare(t) > 0;
};
Fraction.prototype.lte = function(t) {
  return this.compare(t) <= 0;
};
Fraction.prototype.gte = function(t) {
  return this.compare(t) >= 0;
};
Fraction.prototype.eq = function(t) {
  return this.compare(t) == 0;
};
Fraction.prototype.ne = function(t) {
  return this.compare(t) != 0;
};
Fraction.prototype.max = function(t) {
  return this.gt(t) ? this : t;
};
Fraction.prototype.maximum = function(...t) {
  return t = t.map((e) => new Fraction(e)), t.reduce((e, n) => n.max(e), this);
};
Fraction.prototype.min = function(t) {
  return this.lt(t) ? this : t;
};
Fraction.prototype.mulmaybe = function(t) {
  return t !== void 0 ? this.mul(t) : void 0;
};
Fraction.prototype.divmaybe = function(t) {
  return t !== void 0 ? this.div(t) : void 0;
};
Fraction.prototype.addmaybe = function(t) {
  return t !== void 0 ? this.add(t) : void 0;
};
Fraction.prototype.submaybe = function(t) {
  return t !== void 0 ? this.sub(t) : void 0;
};
Fraction.prototype.show = function() {
  return this.s * this.n + "/" + this.d;
};
Fraction.prototype.or = function(t) {
  return this.eq(0) ? t : this;
};
var h = (t) => Fraction(t);
var Ge = (...t) => {
  if (t = nt(t), t.length !== 0)
    return t.reduce((e, n) => e.gcd(n), h(1));
};
var U = (...t) => {
  if (t = nt(t), t.length === 0)
    return;
  const e = t.pop();
  return t.reduce(
    (n, s) => n === void 0 || s === void 0 ? void 0 : n.lcm(s),
    e
  );
};
h._original = Fraction;
var T = class _T {
  constructor(e, n) {
    this.begin = h(e), this.end = h(n);
  }
  get spanCycles() {
    const e = [];
    var n = this.begin;
    const s = this.end, r = s.sam();
    if (n.equals(s))
      return [new _T(n, s)];
    for (; s.gt(n); ) {
      if (n.sam().equals(r)) {
        e.push(new _T(n, this.end));
        break;
      }
      const o = n.nextSam();
      e.push(new _T(n, o)), n = o;
    }
    return e;
  }
  get duration() {
    return this.end.sub(this.begin);
  }
  cycleArc() {
    const e = this.begin.cyclePos(), n = e.add(this.duration);
    return new _T(e, n);
  }
  withTime(e) {
    return new _T(e(this.begin), e(this.end));
  }
  withEnd(e) {
    return new _T(this.begin, e(this.end));
  }
  withCycle(e) {
    const n = this.begin.sam(), s = n.add(e(this.begin.sub(n))), r = n.add(e(this.end.sub(n)));
    return new _T(s, r);
  }
  intersection(e) {
    const n = this.begin.max(e.begin), s = this.end.min(e.end);
    if (!n.gt(s) && !(n.equals(s) && (n.equals(this.end) && this.begin.lt(this.end) || n.equals(e.end) && e.begin.lt(e.end))))
      return new _T(n, s);
  }
  intersection_e(e) {
    const n = this.intersection(e);
    if (n == null)
      throw "TimeSpans do not intersect";
    return n;
  }
  midpoint() {
    return this.begin.add(this.duration.div(h(2)));
  }
  equals(e) {
    return this.begin.equals(e.begin) && this.end.equals(e.end);
  }
  show() {
    return this.begin.show() + " → " + this.end.show();
  }
};
var S = class _S {
  /*
        Event class, representing a value active during the timespan
        'part'. This might be a fragment of an event, in which case the
        timespan will be smaller than the 'whole' timespan, otherwise the
        two timespans will be the same. The 'part' must never extend outside of the
        'whole'. If the event represents a continuously changing value
        then the whole will be returned as None, in which case the given
        value will have been sampled from the point halfway between the
        start and end of the 'part' timespan.
        The context is to store a list of source code locations causing the event.
  
        The word 'Event' is more or less a reserved word in javascript, hence this
        class is named called 'Hap'.
        */
  constructor(e, n, s, r = {}, o = false) {
    this.whole = e, this.part = n, this.value = s, this.context = r, this.stateful = o, o && console.assert(typeof this.value == "function", "Stateful values must be functions");
  }
  get duration() {
    var _a2, _b;
    let e;
    return typeof ((_a2 = this.value) == null ? void 0 : _a2.duration) == "number" ? e = h(this.value.duration) : e = this.whole.end.sub(this.whole.begin), typeof ((_b = this.value) == null ? void 0 : _b.clip) == "number" ? e.mul(this.value.clip) : e;
  }
  get endClipped() {
    return this.whole.begin.add(this.duration);
  }
  isActive(e) {
    return this.whole.begin <= e && this.endClipped >= e;
  }
  isInPast(e) {
    return e > this.endClipped;
  }
  isInNearPast(e, n) {
    return n - e <= this.endClipped;
  }
  isInFuture(e) {
    return e < this.whole.begin;
  }
  isInNearFuture(e, n) {
    return n < this.whole.begin && n > this.whole.begin - e;
  }
  isWithinTime(e, n) {
    return this.whole.begin <= n && this.endClipped >= e;
  }
  wholeOrPart() {
    return this.whole ? this.whole : this.part;
  }
  withSpan(e) {
    const n = this.whole ? e(this.whole) : void 0;
    return new _S(n, e(this.part), this.value, this.context);
  }
  withValue(e) {
    return new _S(this.whole, this.part, e(this.value), this.context);
  }
  hasOnset() {
    return this.whole != null && this.whole.begin.equals(this.part.begin);
  }
  hasTag(e) {
    var _a2;
    return (_a2 = this.context.tags) == null ? void 0 : _a2.includes(e);
  }
  resolveState(e) {
    if (this.stateful && this.hasOnset()) {
      console.log("stateful");
      const n = this.value, [s, r] = n(e);
      return [s, new _S(this.whole, this.part, r, this.context, false)];
    }
    return [e, this];
  }
  spanEquals(e) {
    return this.whole == null && e.whole == null || this.whole.equals(e.whole);
  }
  equals(e) {
    return this.spanEquals(e) && this.part.equals(e.part) && // TODO would == be better ??
    this.value === e.value;
  }
  show(e = false) {
    const n = typeof this.value == "object" ? e ? JSON.stringify(this.value).slice(1, -1).replaceAll('"', "").replaceAll(",", " ") : JSON.stringify(this.value) : this.value;
    var s = "";
    if (this.whole == null)
      s = "~" + this.part.show;
    else {
      var r = this.whole.begin.equals(this.part.begin) && this.whole.end.equals(this.part.end);
      this.whole.begin.equals(this.part.begin) || (s = this.whole.begin.show() + " ⇜ "), r || (s += "("), s += this.part.show(), r || (s += ")"), this.whole.end.equals(this.part.end) || (s += " ⇝ " + this.whole.end.show());
    }
    return "[ " + s + " | " + n + " ]";
  }
  showWhole(e = false) {
    return `${this.whole == null ? "~" : this.whole.show()}: ${typeof this.value == "object" ? e ? JSON.stringify(this.value).slice(1, -1).replaceAll('"', "").replaceAll(",", " ") : JSON.stringify(this.value) : this.value}`;
  }
  combineContext(e) {
    const n = this;
    return { ...n.context, ...e.context, locations: (n.context.locations || []).concat(e.context.locations || []) };
  }
  setContext(e) {
    return new _S(this.whole, this.part, this.value, e);
  }
  ensureObjectValue() {
    if (typeof this.value != "object")
      throw new Error(
        `expected hap.value to be an object, but got "${this.value}". Hint: append .note() or .s() to the end`,
        "error"
      );
  }
};
var et = class _et {
  constructor(e, n = {}) {
    this.span = e, this.controls = n;
  }
  // Returns new State with different span
  setSpan(e) {
    return new _et(e, this.controls);
  }
  withSpan(e) {
    return this.setSpan(e(this.span));
  }
  // Returns new State with different controls
  setControls(e) {
    return new _et(this.span, e);
  }
};
function Qe(t, e, n) {
  if ((e == null ? void 0 : e.value) !== void 0 && Object.keys(e).length === 1)
    return E("[warn]: Can't do arithmetic on control pattern."), t;
  const s = Object.keys(t).filter((r) => Object.keys(e).includes(r));
  return Object.assign({}, t, e, Object.fromEntries(s.map((r) => [r, n(t[r], e[r])])));
}
g((t, e) => t * e);
g((t, e) => e.map(t));
function Ue(t, e = 60) {
  let n = 0, s = h(0), r = [""], o = "";
  for (; r[0].length < e; ) {
    const i = t.queryArc(n, n + 1), u = i.filter((m) => m.hasOnset()).map((m) => m.duration), a = Ge(...u), p = a.inverse();
    r = r.map((m) => m + "|"), o += "|";
    for (let m = 0; m < p; m++) {
      const [y, _] = [s, s.add(a)], w = i.filter((O) => O.whole.begin.lte(y) && O.whole.end.gte(_)), b = w.length - r.length;
      b > 0 && (r = r.concat(Array(b).fill(o))), r = r.map((O, x) => {
        const I = w[x];
        if (I) {
          const z = I.whole.begin.eq(y) ? "" + I.value : "-";
          return O + z;
        }
        return O + ".";
      }), o += ".", s = s.add(a);
    }
    n++;
  }
  return r.join(`
`);
}
var ht;
var R = true;
var Lu = function(t) {
  R = !!t;
};
var Wu = (t) => ht = t;
var f = class _f2 {
  /**
   * Create a pattern. As an end user, you will most likely not create a Pattern directly.
   *
   * @param {function} query - The function that maps a `State` to an array of `Hap`.
   * @noAutocomplete
   */
  constructor(e, n = void 0) {
    __publicField(this, "polyJoin", function() {
      const e = this;
      return e.fmap((n) => n.extend(e._steps.div(n._steps))).outerJoin();
    });
    this.query = e, this._Pattern = true, this._steps = n;
  }
  get _steps() {
    return this.__steps;
  }
  set _steps(e) {
    this.__steps = e === void 0 ? void 0 : h(e);
  }
  setSteps(e) {
    return this._steps = e, this;
  }
  withSteps(e) {
    return R ? new _f2(this.query, this._steps === void 0 ? void 0 : e(this._steps)) : this;
  }
  get hasSteps() {
    return this._steps !== void 0;
  }
  //////////////////////////////////////////////////////////////////////
  // Haskell-style functor, applicative and monadic operations
  /**
   * Returns a new pattern, with the function applied to the value of
   * each hap. It has the alias `fmap`.
   * @synonyms fmap
   * @param {Function} func to to apply to the value
   * @returns Pattern
   * @example
   * "0 1 2".withValue(v => v + 10).log()
   */
  withValue(e) {
    const n = new _f2((s) => this.query(s).map((r) => r.withValue(e)));
    return n._steps = this._steps, n;
  }
  // runs func on query state
  withState(e) {
    return this.withHaps((n, s) => (e(s), n));
  }
  /**
   * see `withValue`
   * @noAutocomplete
   */
  fmap(e) {
    return this.withValue(e);
  }
  /**
   * Assumes 'this' is a pattern of functions, and given a function to
   * resolve wholes, applies a given pattern of values to that
   * pattern of functions.
   * @param {Function} whole_func
   * @param {Function} func
   * @noAutocomplete
   * @returns Pattern
   */
  appWhole(e, n) {
    const s = this, r = function(o) {
      const i = s.query(o), u = n.query(o), a = function(p, m) {
        const y = p.part.intersection(m.part);
        if (y != null)
          return new S(
            e(p.whole, m.whole),
            y,
            p.value(m.value),
            m.combineContext(p)
          );
      };
      return Q(
        i.map((p) => nt(u.map((m) => a(p, m))))
      );
    };
    return new _f2(r);
  }
  /**
   * When this method is called on a pattern of functions, it matches its haps
   * with those in the given pattern of values.  A new pattern is returned, with
   * each matching value applied to the corresponding function.
   *
   * In this `_appBoth` variant, where timespans of the function and value haps
   * are not the same but do intersect, the resulting hap has a timespan of the
   * intersection. This applies to both the part and the whole timespan.
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appBoth(e) {
    const n = this, s = function(o, i) {
      if (!(o == null || i == null))
        return o.intersection_e(i);
    }, r = n.appWhole(s, e);
    return R && (r._steps = U(e._steps, n._steps)), r;
  }
  /**
   * As with `appBoth`, but the `whole` timespan is not the intersection,
   * but the timespan from the function of patterns that this method is called
   * on. In practice, this means that the pattern structure, including onsets,
   * are preserved from the pattern of functions (often referred to as the left
   * hand or inner pattern).
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appLeft(e) {
    const n = this, s = function(o) {
      const i = [];
      for (const u of n.query(o)) {
        const a = e.query(o.setSpan(u.wholeOrPart()));
        for (const p of a) {
          const m = u.whole, y = u.part.intersection(p.part);
          if (y) {
            const _ = u.value(p.value), w = p.combineContext(u), b = new S(m, y, _, w);
            i.push(b);
          }
        }
      }
      return i;
    }, r = new _f2(s);
    return r._steps = this._steps, r;
  }
  /**
   * As with `appLeft`, but `whole` timespans are instead taken from the
   * pattern of values, i.e. structure is preserved from the right hand/outer
   * pattern.
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appRight(e) {
    const n = this, s = function(o) {
      const i = [];
      for (const u of e.query(o)) {
        const a = n.query(o.setSpan(u.wholeOrPart()));
        for (const p of a) {
          const m = u.whole, y = p.part.intersection(u.part);
          if (y) {
            const _ = p.value(u.value), w = u.combineContext(p), b = new S(m, y, _, w);
            i.push(b);
          }
        }
      }
      return i;
    }, r = new _f2(s);
    return r._steps = e._steps, r;
  }
  bindWhole(e, n) {
    const s = this, r = function(o) {
      const i = function(a, p) {
        return new S(
          e(a.whole, p.whole),
          p.part,
          p.value,
          Object.assign({}, a.context, p.context, {
            locations: (a.context.locations || []).concat(p.context.locations || [])
          })
        );
      }, u = function(a) {
        return n(a.value).query(o.setSpan(a.part)).map((p) => i(a, p));
      };
      return Q(s.query(o).map((a) => u(a)));
    };
    return new _f2(r);
  }
  bind(e) {
    const n = function(s, r) {
      if (!(s == null || r == null))
        return s.intersection_e(r);
    };
    return this.bindWhole(n, e);
  }
  join() {
    return this.bind(Z);
  }
  outerBind(e) {
    return this.bindWhole((n) => n, e).setSteps(this._steps);
  }
  outerJoin() {
    return this.outerBind(Z);
  }
  innerBind(e) {
    return this.bindWhole((n, s) => s, e);
  }
  innerJoin() {
    return this.innerBind(Z);
  }
  // Flatterns patterns of patterns, by retriggering/resetting inner patterns at onsets of outer pattern haps
  resetJoin(e = false) {
    const n = this;
    return new _f2((s) => n.discreteOnly().query(s).map((r) => r.value.late(e ? r.whole.begin : r.whole.begin.cyclePos()).query(s).map(
      (o) => new S(
        // Supports continuous haps in the inner pattern
        o.whole ? o.whole.intersection(r.whole) : void 0,
        o.part.intersection(r.part),
        o.value
      ).setContext(r.combineContext(o))
    ).filter((o) => o.part)).flat());
  }
  restartJoin() {
    return this.resetJoin(true);
  }
  // Like the other joins above, joins a pattern of patterns of values, into a flatter
  // pattern of values. In this case it takes whole cycles of the inner pattern to fit each event
  // in the outer pattern.
  squeezeJoin() {
    const e = this;
    function n(s) {
      const r = e.discreteOnly().query(s);
      function o(u) {
        const p = u.value._focusSpan(u.wholeOrPart()).query(s.setSpan(u.part));
        function m(y, _) {
          let w;
          if (_.whole && y.whole && (w = _.whole.intersection(y.whole), !w))
            return;
          const b = _.part.intersection(y.part);
          if (!b)
            return;
          const O = _.combineContext(y);
          return new S(w, b, _.value, O);
        }
        return p.map((y) => m(u, y));
      }
      return Q(r.map(o)).filter((u) => u);
    }
    return new _f2(n);
  }
  squeezeBind(e) {
    return this.fmap(e).squeezeJoin();
  }
  polyBind(e) {
    return this.fmap(e).polyJoin();
  }
  //////////////////////////////////////////////////////////////////////
  // Utility methods mainly for internal use
  /**
   * Query haps inside the given time span.
   *
   * @param {Fraction | number} begin from time
   * @param {Fraction | number} end to time
   * @returns Hap[]
   * @example
   * const pattern = sequence('a', ['b', 'c'])
   * const haps = pattern.queryArc(0, 1)
   * console.log(haps)
   * silence
   * @noAutocomplete
   */
  queryArc(e, n, s = {}) {
    try {
      return this.query(new et(new T(e, n), s));
    } catch (r) {
      return E(`[query]: ${r.message}`, "error"), [];
    }
  }
  /**
   * Returns a new pattern, with queries split at cycle boundaries. This makes
   * some calculations easier to express, as all haps are then constrained to
   * happen within a cycle.
   * @returns Pattern
   * @noAutocomplete
   */
  splitQueries() {
    const e = this, n = (s) => Q(s.span.spanCycles.map((r) => e.query(s.setSpan(r))));
    return new _f2(n);
  }
  /**
   * Returns a new pattern, where the given function is applied to the query
   * timespan before passing it to the original pattern.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withQuerySpan(e) {
    return new _f2((n) => this.query(n.withSpan(e)));
  }
  withQuerySpanMaybe(e) {
    const n = this;
    return new _f2((s) => {
      const r = s.withSpan(e);
      return r.span ? n.query(r) : [];
    });
  }
  /**
   * As with `withQuerySpan`, but the function is applied to both the
   * begin and end time of the query timespan.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withQueryTime(e) {
    return new _f2((n) => this.query(n.withSpan((s) => s.withTime(e))));
  }
  /**
   * Similar to `withQuerySpan`, but the function is applied to the timespans
   * of all haps returned by pattern queries (both `part` timespans, and where
   * present, `whole` timespans).
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHapSpan(e) {
    return new _f2((n) => this.query(n).map((s) => s.withSpan(e)));
  }
  /**
   * As with `withHapSpan`, but the function is applied to both the
   * begin and end time of the hap timespans.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withHapTime(e) {
    return this.withHapSpan((n) => n.withTime(e));
  }
  /**
   * Returns a new pattern with the given function applied to the list of haps returned by every query.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHaps(e) {
    const n = new _f2((s) => e(this.query(s), s));
    return n._steps = this._steps, n;
  }
  /**
   * As with `withHaps`, but applies the function to every hap, rather than every list of haps.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHap(e) {
    return this.withHaps((n) => n.map(e));
  }
  /**
   * Returns a new pattern with the context field set to every hap set to the given value.
   * @param {*} context
   * @returns Pattern
   * @noAutocomplete
   */
  setContext(e) {
    return this.withHap((n) => n.setContext(e));
  }
  /**
   * Returns a new pattern with the given function applied to the context field of every hap.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withContext(e) {
    const n = this.withHap((s) => s.setContext(e(s.context)));
    return this.__pure !== void 0 && (n.__pure = this.__pure, n.__pure_loc = this.__pure_loc), n;
  }
  /**
   * Returns a new pattern with the context field of every hap set to an empty object.
   * @returns Pattern
   * @noAutocomplete
   */
  stripContext() {
    return this.withHap((e) => e.setContext({}));
  }
  /**
   * Returns a new pattern with the given location information added to the
   * context of every hap.
   * @param {Number} start start offset
   * @param {Number} end end offset
   * @returns Pattern
   * @noAutocomplete
   */
  withLoc(e, n) {
    const s = {
      start: e,
      end: n
    }, r = this.withContext((o) => {
      const i = (o.locations || []).concat([s]);
      return { ...o, locations: i };
    });
    return this.__pure && (r.__pure = this.__pure, r.__pure_loc = s), r;
  }
  /**
   * Returns a new Pattern, which only returns haps that meet the given test.
   * @param {Function} hap_test - a function which returns false for haps to be removed from the pattern
   * @returns Pattern
   * @noAutocomplete
   */
  filterHaps(e) {
    return new _f2((n) => this.query(n).filter(e));
  }
  /**
   * As with `filterHaps`, but the function is applied to values
   * inside haps.
   * @param {Function} value_test
   * @returns Pattern
   * @noAutocomplete
   */
  filterValues(e) {
    return new _f2((n) => this.query(n).filter((s) => e(s.value))).setSteps(this._steps);
  }
  /**
   * Returns a new pattern, with haps containing undefined values removed from
   * query results.
   * @returns Pattern
   * @noAutocomplete
   */
  removeUndefineds() {
    return this.filterValues((e) => e != null);
  }
  /**
   * Returns a new pattern, with all haps without onsets filtered out. A hap
   * with an onset is one with a `whole` timespan that begins at the same time
   * as its `part` timespan.
   * @returns Pattern
   * @noAutocomplete
   */
  onsetsOnly() {
    return this.filterHaps((e) => e.hasOnset());
  }
  /**
   * Returns a new pattern, with 'continuous' haps (those without 'whole'
   * timespans) removed from query results.
   * @returns Pattern
   * @noAutocomplete
   */
  discreteOnly() {
    return this.filterHaps((e) => e.whole);
  }
  /**
   * Combines adjacent haps with the same value and whole.  Only
   * intended for use in tests.
   * @noAutocomplete
   */
  defragmentHaps() {
    return this.discreteOnly().withHaps((n) => {
      const s = [];
      for (var r = 0; r < n.length; ++r) {
        for (var o = true, i = n[r]; o; ) {
          const p = JSON.stringify(n[r].value);
          for (var u = false, a = r + 1; a < n.length; a++) {
            const m = n[a];
            if (i.whole.equals(m.whole)) {
              if (i.part.begin.eq(m.part.end)) {
                if (p === JSON.stringify(m.value)) {
                  i = new S(i.whole, new T(m.part.begin, i.part.end), i.value), n.splice(a, 1), u = true;
                  break;
                }
              } else if (m.part.begin.eq(i.part.end) && p == JSON.stringify(m.value)) {
                i = new S(i.whole, new T(i.part.begin, m.part.end), i.value), n.splice(a, 1), u = true;
                break;
              }
            }
          }
          o = u;
        }
        s.push(i);
      }
      return s;
    });
  }
  /**
   * Queries the pattern for the first cycle, returning Haps. Mainly of use when
   * debugging a pattern.
   * @param {Boolean} with_context - set to true, otherwise the context field
   * will be stripped from the resulting haps.
   * @returns [Hap]
   * @noAutocomplete
   */
  firstCycle(e = false) {
    var n = this;
    return e || (n = n.stripContext()), n.query(new et(new T(h(0), h(1))));
  }
  /**
   * Accessor for a list of values returned by querying the first cycle.
   * @noAutocomplete
   */
  get firstCycleValues() {
    return this.firstCycle().map((e) => e.value);
  }
  /**
   * More human-readable version of the `firstCycleValues` accessor.
   * @noAutocomplete
   */
  get showFirstCycle() {
    return this.firstCycle().map(
      (e) => `${e.value}: ${e.whole.begin.toFraction()} - ${e.whole.end.toFraction()}`
    );
  }
  /**
   * Returns a new pattern, which returns haps sorted in temporal order. Mainly
   * of use when comparing two patterns for equality, in tests.
   * @returns Pattern
   * @noAutocomplete
   */
  sortHapsByPart() {
    return this.withHaps(
      (e) => e.sort(
        (n, s) => n.part.begin.sub(s.part.begin).or(n.part.end.sub(s.part.end)).or(n.whole.begin.sub(s.whole.begin).or(n.whole.end.sub(s.whole.end)))
      )
    );
  }
  asNumber() {
    return this.fmap(Ht);
  }
  //////////////////////////////////////////////////////////////////////
  // Operators - see 'make composers' later..
  _opIn(e, n) {
    return this.fmap(n).appLeft(d(e));
  }
  _opOut(e, n) {
    return this.fmap(n).appRight(d(e));
  }
  _opMix(e, n) {
    return this.fmap(n).appBoth(d(e));
  }
  _opSqueeze(e, n) {
    const s = d(e);
    return this.fmap((r) => s.fmap((o) => n(r)(o))).squeezeJoin();
  }
  _opSqueezeOut(e, n) {
    const s = this;
    return d(e).fmap((o) => s.fmap((i) => n(i)(o))).squeezeJoin();
  }
  _opReset(e, n) {
    return d(e).fmap((r) => this.fmap((o) => n(o)(r))).resetJoin();
  }
  _opRestart(e, n) {
    return d(e).fmap((r) => this.fmap((o) => n(o)(r))).restartJoin();
  }
  _opPoly(e, n) {
    const s = d(e);
    return this.fmap((r) => s.fmap((o) => n(o)(r))).polyJoin();
  }
  //////////////////////////////////////////////////////////////////////
  // End-user methods.
  // Those beginning with an underscore (_) are 'patternified',
  // i.e. versions are created without the underscore, that are
  // magically transformed to accept patterns for all their arguments.
  //////////////////////////////////////////////////////////////////////
  // Methods without corresponding toplevel functions
  /**
   * Layers the result of the given function(s). Like `superimpose`, but without the original pattern:
   * @name layer
   * @memberof Pattern
   * @synonyms apply
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8"
   *   .layer(x=>x.add("0,2"))
   *   .scale('C minor').note()
   */
  layer(...e) {
    return C(...e.map((n) => n(this)));
  }
  /**
   * Superimposes the result of the given function(s) on top of the original pattern:
   * @name superimpose
   * @memberof Pattern
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8"
   *   .superimpose(x=>x.add(2))
   *   .scale('C minor').note()
   */
  superimpose(...e) {
    return this.stack(...e.map((n) => n(this)));
  }
  //////////////////////////////////////////////////////////////////////
  // Multi-pattern functions
  stack(...e) {
    return C(this, ...e);
  }
  sequence(...e) {
    return V(this, ...e);
  }
  seq(...e) {
    return V(this, ...e);
  }
  cat(...e) {
    return sn(this, ...e);
  }
  fastcat(...e) {
    return W(this, ...e);
  }
  slowcat(...e) {
    return K(this, ...e);
  }
  //////////////////////////////////////////////////////////////////////
  // Context methods - ones that deal with metadata
  onTrigger(e, n = true) {
    return this.withHap(
      (s) => s.setContext({
        ...s.context,
        onTrigger: (...r) => {
          var _a2, _b;
          (_b = (_a2 = s.context).onTrigger) == null ? void 0 : _b.call(_a2, ...r), e(...r);
        },
        // if dominantTrigger is set to true, the default output (webaudio) will be disabled
        // when using multiple triggers, you cannot flip this flag to false again!
        // example: x.csound('CooLSynth').log() as well as x.log().csound('CooLSynth') should work the same
        dominantTrigger: s.context.dominantTrigger || n
      })
    );
  }
  log(e = (s, r) => `[hap] ${r.showWhole(true)}`, n = (s, r) => ({ hap: r })) {
    return this.onTrigger((...s) => {
      E(e(...s), void 0, n(...s));
    }, false);
  }
  logValues(e = Z) {
    return this.log((n, s) => e(s.value));
  }
  //////////////////////////////////////////////////////////////////////
  // Visualisation
  drawLine() {
    return console.log(Ue(this)), this;
  }
};
function Ke(t, e) {
  let n = [];
  return e.forEach((s) => {
    const r = n.findIndex(([o]) => t(s, o));
    r === -1 ? n.push([s]) : n[r].push(s);
  }), n;
}
var Xe = (t, e) => t.spanEquals(e);
f.prototype.collect = function() {
  return this.withHaps(
    (t) => Ke(Xe, t).map((e) => new S(e[0].whole, e[0].part, e, {}))
  );
};
f.prototype.arpWith = function(t) {
  return this.collect().fmap((e) => d(t(e))).innerJoin().withHap((e) => new S(e.whole, e.part, e.value.value, e.combineContext(e.value)));
};
f.prototype.arp = function(t) {
  return this.arpWith((e) => t.fmap((n) => e[n % e.length]));
};
function ot(t) {
  return !Array.isArray(t) && typeof t == "object";
}
function Ye(t, e, n) {
  return ot(t) || ot(e) ? (ot(t) || (t = { value: t }), ot(e) || (e = { value: e }), Qe(t, e, n)) : n(t, e);
}
(function() {
  const t = {
    set: [(n, s) => s],
    keep: [(n) => n],
    keepif: [(n, s) => s ? n : void 0],
    // numerical functions
    /**
     *
     * Assumes a pattern of numbers. Adds the given number to each item in the pattern.
     * @name add
     * @memberof Pattern
     * @example
     * // Here, the triad 0, 2, 4 is shifted by different amounts
     * n("0 2 4".add("<0 3 4 0>")).scale("C:major")
     * // Without add, the equivalent would be:
     * // n("<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>").scale("C:major")
     * @example
     * // You can also use add with notes:
     * note("c3 e3 g3".add("<0 5 7 0>"))
     * // Behind the scenes, the notes are converted to midi numbers:
     * // note("48 52 55".add("<0 5 7 0>"))
     */
    add: [N((n, s) => n + s)],
    // support string concatenation
    /**
     *
     * Like add, but the given numbers are subtracted.
     * @name sub
     * @memberof Pattern
     * @example
     * n("0 2 4".sub("<0 1 2 3>")).scale("C4:minor")
     * // See add for more information.
     */
    sub: [N((n, s) => n - s)],
    /**
     *
     * Multiplies each number by the given factor.
     * @name mul
     * @memberof Pattern
     * @example
     * "<1 1.5 [1.66, <2 2.33>]>*4".mul(150).freq()
     */
    mul: [N((n, s) => n * s)],
    /**
     *
     * Divides each number by the given factor.
     * @name div
     * @memberof Pattern
     */
    div: [N((n, s) => n / s)],
    mod: [N(ut)],
    pow: [N(Math.pow)],
    log2: [N(Math.log2)],
    band: [N((n, s) => n & s)],
    bor: [N((n, s) => n | s)],
    bxor: [N((n, s) => n ^ s)],
    blshift: [N((n, s) => n << s)],
    brshift: [N((n, s) => n >> s)],
    // TODO - force numerical comparison if both look like numbers?
    lt: [(n, s) => n < s],
    gt: [(n, s) => n > s],
    lte: [(n, s) => n <= s],
    gte: [(n, s) => n >= s],
    eq: [(n, s) => n == s],
    eqt: [(n, s) => n === s],
    ne: [(n, s) => n != s],
    net: [(n, s) => n !== s],
    and: [(n, s) => n && s],
    or: [(n, s) => n || s],
    //  bitwise ops
    func: [(n, s) => s(n)]
  }, e = ["In", "Out", "Mix", "Squeeze", "SqueezeOut", "Reset", "Restart", "Poly"];
  for (const [n, [s, r]] of Object.entries(t)) {
    f.prototype["_" + n] = function(o) {
      return this.fmap((i) => s(i, o));
    }, Object.defineProperty(f.prototype, n, {
      // a getter that returns a function, so 'pat' can be
      // accessed by closures that are methods of that function..
      get: function() {
        const o = this, i = (...u) => o[n].in(...u);
        for (const u of e)
          i[u.toLowerCase()] = function(...a) {
            var p = o;
            a = V(a), r && (p = r(p), a = r(a));
            var m;
            return n === "keepif" ? (m = p["_op" + u](a, (y) => (_) => s(y, _)), m = m.removeUndefineds()) : m = p["_op" + u](a, (y) => (_) => Ye(y, _, s)), m;
          };
        return i.squeezein = i.squeeze, i;
      }
    });
    for (const o of e)
      f.prototype[o.toLowerCase()] = function(...i) {
        return this.set[o.toLowerCase()](i);
      };
  }
  f.prototype.struct = function(...n) {
    return this.keepif.out(...n);
  }, f.prototype.structAll = function(...n) {
    return this.keep.out(...n);
  }, f.prototype.mask = function(...n) {
    return this.keepif.in(...n);
  }, f.prototype.maskAll = function(...n) {
    return this.keep.in(...n);
  }, f.prototype.reset = function(...n) {
    return this.keepif.reset(...n);
  }, f.prototype.resetAll = function(...n) {
    return this.keep.reset(...n);
  }, f.prototype.restart = function(...n) {
    return this.keepif.restart(...n);
  }, f.prototype.restartAll = function(...n) {
    return this.keep.restart(...n);
  };
})();
var Hu = C;
var Iu = C;
var Fu = kt;
var st = (t) => new f(() => [], t);
var q = st(1);
var $ = st(0);
function j(t) {
  function e(s) {
    return s.span.spanCycles.map((r) => new S(h(r.begin).wholeCycle(), r, t));
  }
  const n = new f(e, 1);
  return n.__pure = t, n;
}
function Dt(t) {
  return t instanceof f || (t == null ? void 0 : t._Pattern);
}
function d(t) {
  return Dt(t) ? t : ht && typeof t == "string" ? ht(t) : j(t);
}
function Ze(t) {
  let e = j([]);
  for (const n of t)
    e = e.bind((s) => n.fmap((r) => s.concat([r])));
  return e;
}
function C(...t) {
  t = t.map((s) => Array.isArray(s) ? V(...s) : d(s));
  const e = (s) => Q(t.map((r) => r.query(s))), n = new f(e);
  return R && (n._steps = U(...t.map((s) => s._steps))), n;
}
function bt(t, e) {
  if (e = e.map((o) => Array.isArray(o) ? V(...o) : d(o)), e.length === 0)
    return q;
  if (e.length === 1)
    return e[0];
  const [n, ...s] = e.map((o) => o._steps), r = R ? n.maximum(...s) : void 0;
  return C(...t(r, e));
}
function tn(...t) {
  return bt(
    (e, n) => n.map((s) => s._steps.eq(e) ? s : J(s, st(e.sub(s._steps)))),
    t
  );
}
function en(...t) {
  return bt(
    (e, n) => n.map((s) => s._steps.eq(e) ? s : J(st(e.sub(s._steps)), s)),
    t
  );
}
function nn(...t) {
  return bt(
    (e, n) => n.map((s) => {
      if (s._steps.eq(e))
        return s;
      const r = st(e.sub(s._steps).div(2));
      return J(r, s, r);
    }),
    t
  );
}
function Vu(t, ...e) {
  const [n, ...s] = e.map((i) => i._steps), r = n.maximum(...s), o = {
    centre: nn,
    left: tn,
    right: en,
    expand: C,
    repeat: (...i) => kt(...i).steps(r)
  };
  return t.inhabit(o).fmap((i) => i(...e)).innerJoin().setSteps(r);
}
function K(...t) {
  if (t = t.map((s) => Array.isArray(s) ? W(...s) : d(s)), t.length == 1)
    return t[0];
  const e = function(s) {
    const r = s.span, o = ut(r.begin.sam(), t.length), i = t[o];
    if (!i)
      return [];
    const u = r.begin.floor().sub(r.begin.div(t.length).floor());
    return i.withHapTime((a) => a.add(u)).query(s.setSpan(r.withTime((a) => a.sub(u))));
  }, n = R ? U(...t.map((s) => s._steps)) : void 0;
  return new f(e).splitQueries().setSteps(n);
}
function Gt(...t) {
  t = t.map(d);
  const e = function(n) {
    var _a2;
    const s = Math.floor(n.span.begin) % t.length;
    return ((_a2 = t[s]) == null ? void 0 : _a2.query(n)) || [];
  };
  return new f(e).splitQueries();
}
function sn(...t) {
  return K(...t);
}
function Du(...t) {
  const e = t.reduce((n, [s]) => n + s, 0);
  return t = t.map(([n, s]) => [n, s.fast(n)]), J(...t).slow(e);
}
function Gu(...t) {
  let e = h(0);
  for (let n of t)
    n.length == 2 && n.unshift(e), e = n[1];
  return C(
    ...t.map(
      ([n, s, r]) => j(d(r)).compress(h(n).div(e), h(s).div(e))
    )
  ).slow(e).innerJoin();
}
function W(...t) {
  let e = K(...t);
  return t.length > 1 && (e = e._fast(t.length), e._steps = t.length), t.length == 1 && t[0].__steps_source && (t._steps = t[0]._steps), e;
}
function V(...t) {
  return W(...t);
}
function rn(...t) {
  return W(...t);
}
function dt(t) {
  return Array.isArray(t) ? t.length == 0 ? [q, 0] : t.length == 1 ? dt(t[0]) : [W(...t.map((e) => dt(e)[0])), t.length] : [d(t), 1];
}
var Qu = g((t, e) => d(e).mask(t));
var Uu = g((t, e) => d(e).struct(t));
var Ku = g((t, e) => d(e).superimpose(...t));
var Xu = g((t, e) => d(e).withValue(t));
var Yu = g((t, e) => d(e).bind(t));
var Zu = g((t, e) => d(e).innerBind(t));
var ta = g((t, e) => d(e).outerBind(t));
var ea = g((t, e) => d(e).squeezeBind(t));
var na = g((t, e) => d(e).stepBind(t));
var sa = g((t, e) => d(e).polyBind(t));
var ra = g((t, e) => d(e).set(t));
var oa = g((t, e) => d(e).keep(t));
var ia = g((t, e) => d(e).keepif(t));
var ca = g((t, e) => d(e).add(t));
var ua = g((t, e) => d(e).sub(t));
var aa = g((t, e) => d(e).mul(t));
var la = g((t, e) => d(e).div(t));
var pa = g((t, e) => d(e).mod(t));
var fa = g((t, e) => d(e).pow(t));
var ha = g((t, e) => d(e).band(t));
var da = g((t, e) => d(e).bor(t));
var ma = g((t, e) => d(e).bxor(t));
var ya = g((t, e) => d(e).blshift(t));
var ga = g((t, e) => d(e).brshift(t));
var wa = g((t, e) => d(e).lt(t));
var ba = g((t, e) => d(e).gt(t));
var _a = g((t, e) => d(e).lte(t));
var va = g((t, e) => d(e).gte(t));
var ka = g((t, e) => d(e).eq(t));
var qa = g((t, e) => d(e).eqt(t));
var Aa = g((t, e) => d(e).ne(t));
var Sa = g((t, e) => d(e).net(t));
var Ta = g((t, e) => d(e).and(t));
var Ca = g((t, e) => d(e).or(t));
var xa = g((t, e) => d(e).func(t));
function l(t, e, n = true, s = false, r = (o) => o.innerJoin()) {
  if (Array.isArray(t)) {
    const u = {};
    for (const a of t)
      u[a] = l(a, e, n, s, r);
    return u;
  }
  const o = e.length;
  var i;
  return n ? i = function(...u) {
    u = u.map(d);
    const a = u[u.length - 1];
    let p;
    if (o === 1)
      p = e(a);
    else {
      const m = u.slice(0, -1);
      if (m.every((y) => y.__pure != null)) {
        const y = m.map((w) => w.__pure), _ = m.filter((w) => w.__pure_loc).map((w) => w.__pure_loc);
        p = e(...y, a), p = p.withContext((w) => {
          const b = (w.locations || []).concat(_);
          return { ...w, locations: b };
        });
      } else {
        const [y, ..._] = m;
        let w = (...b) => e(...b, a);
        w = g(w, null, o - 1), p = r(_.reduce((b, O) => b.appLeft(O), y.fmap(w)));
      }
    }
    return s && (p._steps = a._steps), p;
  } : i = function(...u) {
    u = u.map(d);
    const a = e(...u);
    return s && (a._steps = u[u.length - 1]._steps), a;
  }, f.prototype[t] = function(...u) {
    if (o === 2 && u.length !== 1)
      u = [V(...u)];
    else if (o !== u.length + 1)
      throw new Error(`.${t}() expects ${o - 1} inputs but got ${u.length}.`);
    return u = u.map(d), i(...u, this);
  }, o > 1 && (f.prototype["_" + t] = function(...u) {
    const a = e(...u, this);
    return s && a.setSteps(this._steps), a;
  }), g(i, null, o);
}
function rt(t, e, n = true, s = false, r = (o) => o.stepJoin()) {
  return l(t, e, n, s, r);
}
var Ba = l("round", function(t) {
  return t.asNumber().fmap((e) => Math.round(e));
});
var Oa = l("floor", function(t) {
  return t.asNumber().fmap((e) => Math.floor(e));
});
var za = l("ceil", function(t) {
  return t.asNumber().fmap((e) => Math.ceil(e));
});
var Ea = l("toBipolar", function(t) {
  return t.fmap((e) => e * 2 - 1);
});
var Ma = l("fromBipolar", function(t) {
  return t.fmap((e) => (e + 1) / 2);
});
var Ja = l("range", function(t, e, n) {
  return n.mul(e - t).add(t);
});
var ja = l("rangex", function(t, e, n) {
  return n._range(Math.log(t), Math.log(e)).fmap(Math.exp);
});
var Pa = l("range2", function(t, e, n) {
  return n.fromBipolar()._range(t, e);
});
var Na = l(
  "ratio",
  (t) => t.fmap((e) => Array.isArray(e) ? e.slice(1).reduce((n, s) => n / s, e[0]) : e)
);
var $a = l("compress", function(t, e, n) {
  return t = h(t), e = h(e), t.gt(e) || t.gt(1) || e.gt(1) || t.lt(0) || e.lt(0) ? q : n._fastGap(h(1).div(e.sub(t)))._late(t);
});
var { compressSpan: Ra, compressspan: La } = l(["compressSpan", "compressspan"], function(t, e) {
  return e._compress(t.begin, t.end);
});
var { fastGap: Wa, fastgap: Ha } = l(["fastGap", "fastgap"], function(t, e) {
  const n = function(r) {
    const o = r.begin.sam(), i = r.begin.sub(o).mul(t).min(1), u = r.end.sub(o).mul(t).min(1);
    if (!(i >= 1))
      return new T(o.add(i), o.add(u));
  }, s = function(r) {
    const o = r.part.begin, i = r.part.end, u = o.sam(), a = o.sub(u).div(t).min(1), p = i.sub(u).div(t).min(1), m = new T(u.add(a), u.add(p)), y = r.whole ? new T(
      m.begin.sub(o.sub(r.whole.begin).div(t)),
      m.end.add(r.whole.end.sub(i).div(t))
    ) : void 0;
    return new S(y, m, r.value, r.context);
  };
  return e.withQuerySpanMaybe(n).withHap(s).splitQueries();
});
var Ia = l("focus", function(t, e, n) {
  return t = h(t), e = h(e), n._early(t.sam())._fast(h(1).div(e.sub(t)))._late(t);
});
var { focusSpan: Fa, focusspan: Va } = l(["focusSpan", "focusspan"], function(t, e) {
  return e._focus(t.begin, t.end);
});
var Da = l("ply", function(t, e) {
  const n = e.fmap((s) => j(s)._fast(t)).squeezeJoin();
  return R && (n._steps = h(t).mulmaybe(e._steps)), n;
});
var { fast: Ga, density: Qa } = l(
  ["fast", "density"],
  function(t, e) {
    return t === 0 ? q : (t = h(t), e.withQueryTime((s) => s.mul(t)).withHapTime((s) => s.div(t)).setSteps(e._steps));
  },
  true,
  true
);
var Ua = l("hurry", function(t, e) {
  return e._fast(t).mul(j({ speed: t }));
});
var { slow: Ka, sparsity: Xa } = l(["slow", "sparsity"], function(t, e) {
  return t === 0 ? q : e._fast(h(1).div(t));
});
var Ya = l("inside", function(t, e, n) {
  return e(n._slow(t))._fast(t);
});
var Za = l("outside", function(t, e, n) {
  return e(n._fast(t))._slow(t);
});
var tl = l("lastOf", function(t, e, n) {
  const s = Array(t - 1).fill(n);
  return s.push(e(n)), Gt(...s);
});
var { firstOf: el, every: nl } = l(["firstOf", "every"], function(t, e, n) {
  const s = Array(t - 1).fill(n);
  return s.unshift(e(n)), Gt(...s);
});
var sl = l("apply", function(t, e) {
  return t(e);
});
var rl = l("cpm", function(t, e) {
  return e._fast(t / 60 / 1);
});
var ol = l(
  "early",
  function(t, e) {
    return t = h(t), e.withQueryTime((n) => n.add(t)).withHapTime((n) => n.sub(t));
  },
  true,
  true
);
var on = l(
  "late",
  function(t, e) {
    return t = h(t), e._early(h(0).sub(t));
  },
  true,
  true
);
var il = l("zoom", function(t, e, n) {
  var _a2;
  if (e = h(e), t = h(t), t.gte(e))
    return $;
  const s = e.sub(t), r = R ? (_a2 = n._steps) == null ? void 0 : _a2.mulmaybe(s) : void 0;
  return n.withQuerySpan((o) => o.withCycle((i) => i.mul(s).add(t))).withHapSpan((o) => o.withCycle((i) => i.sub(t).div(s))).splitQueries().setSteps(r);
});
var { zoomArc: cl, zoomarc: ul } = l(["zoomArc", "zoomarc"], function(t, e) {
  return e.zoom(t.begin, t.end);
});
var al = l(
  "bite",
  (t, e, n) => e.fmap((s) => (r) => {
    const o = h(s).div(r).mod(1), i = o.add(h(1).div(r));
    return n.zoom(o, i);
  }).appLeft(t).squeezeJoin(),
  false
);
var ll = l(
  "linger",
  function(t, e) {
    return t == 0 ? q : t < 0 ? e._zoom(t.add(1), 1)._slow(t) : e._zoom(0, t)._slow(t);
  },
  true,
  true
);
var { segment: pl, seg: fl } = l(["segment", "seg"], function(t, e) {
  return e.struct(j(true)._fast(t)).setSteps(t);
});
var hl = l("swingBy", (t, e, n) => n.inside(e, on(rn(0, t / 2))));
var dl = l("swing", (t, e) => e.swingBy(1 / 3, t));
var { invert: ml, inv: yl } = l(
  ["invert", "inv"],
  function(t) {
    return t.fmap((e) => !e);
  },
  true,
  true
);
var gl = l("when", function(t, e, n) {
  return t ? e(n) : n;
});
var wl = l("off", function(t, e, n) {
  return C(n, e(n.late(t)));
});
var bl = l("brak", function(t) {
  return t.when(K(false, true), (e) => W(e, q)._late(0.25));
});
var cn = l(
  "rev",
  function(t) {
    const e = function(n) {
      const s = n.span, r = s.begin.sam(), o = s.begin.nextSam(), i = function(a) {
        const p = a.withTime((y) => r.add(o.sub(y))), m = p.begin;
        return p.begin = p.end, p.end = m, p;
      };
      return t.query(n.setSpan(i(s))).map((a) => a.withSpan(i));
    };
    return new f(e).splitQueries();
  },
  false,
  true
);
var _l = l("pressBy", function(t, e) {
  return e.fmap((n) => j(n).compress(t, 1)).squeezeJoin();
});
var vl = l("press", function(t) {
  return t._pressBy(0.5);
});
f.prototype.hush = function() {
  return q;
};
var kl = l(
  "palindrome",
  function(t) {
    return t.lastOf(2, cn);
  },
  true,
  true
);
var { juxBy: ql, juxby: Al } = l(["juxBy", "juxby"], function(t, e, n) {
  t /= 2;
  const s = function(i, u, a) {
    return u in i ? i[u] : a;
  }, r = n.withValue((i) => Object.assign({}, i, { pan: s(i, "pan", 0.5) - t })), o = e(n.withValue((i) => Object.assign({}, i, { pan: s(i, "pan", 0.5) + t })));
  return C(r, o).setSteps(R ? U(r._steps, o._steps) : void 0);
});
var Sl = l("jux", function(t, e) {
  return e._juxBy(1, t, e);
});
var { echoWith: Tl, echowith: Cl, stutWith: xl, stutwith: Bl } = l(
  ["echoWith", "echowith", "stutWith", "stutwith"],
  function(t, e, n, s) {
    return C(...Wt(0, t - 1).map((r) => n(s.late(h(e).mul(r)), r)));
  }
);
var Ol = l("echo", function(t, e, n, s) {
  return s._echoWith(t, e, (r, o) => r.gain(Math.pow(n, o)));
});
var zl = l("stut", function(t, e, n, s) {
  return s._echoWith(t, n, (r, o) => r.gain(Math.pow(e, o)));
});
var _t = function(t, e, n = false) {
  return t = h(t), K(
    ...Wt(0, t.sub(1)).map(
      (s) => n ? e.late(h(s).div(t)) : e.early(h(s).div(t))
    )
  );
};
var El = l(
  "iter",
  function(t, e) {
    return _t(t, e, false);
  },
  true,
  true
);
var { iterBack: Ml, iterback: Jl } = l(
  ["iterBack", "iterback"],
  function(t, e) {
    return _t(t, e, true);
  },
  true,
  true
);
var { repeatCycles: jl } = l(
  "repeatCycles",
  function(t, e) {
    return new f(function(n) {
      const s = n.span.begin.sam(), r = s.div(t).sam(), o = s.sub(r);
      return n = n.withSpan((i) => i.withTime((u) => u.sub(o))), e.query(n).map((i) => i.withSpan((u) => u.withTime((a) => a.add(o))));
    }).splitQueries();
  },
  true,
  true
);
var vt = function(t, e, n, s = false, r = false) {
  const o = Array(t - 1).fill(false);
  o.unshift(true);
  const i = _t(t, V(...o), !s);
  return r || (n = n.repeatCycles(t)), n.when(i, e);
};
var { chunk: Pl, slowchunk: Nl, slowChunk: $l } = l(
  ["chunk", "slowchunk", "slowChunk"],
  function(t, e, n) {
    return vt(t, e, n, false, false);
  },
  true,
  true
);
var { chunkBack: Rl, chunkback: Ll } = l(
  ["chunkBack", "chunkback"],
  function(t, e, n) {
    return vt(t, e, n, true);
  },
  true,
  true
);
var { fastchunk: Wl, fastChunk: Hl } = l(
  ["fastchunk", "fastChunk"],
  function(t, e, n) {
    return vt(t, e, n, false, true);
  },
  true,
  true
);
var Il = l(
  "bypass",
  function(t, e) {
    return t = !!parseInt(t), t ? q : e;
  },
  true,
  true
);
var { ribbon: Fl, rib: Vl } = l(
  ["ribbon", "rib"],
  (t, e, n) => n.early(t).restart(j(1).slow(e))
);
var Dl = l("hsla", (t, e, n, s, r) => r.color(`hsla(${t}turn,${e * 100}%,${n * 100}%,${s})`));
var Gl = l("hsl", (t, e, n, s) => s.color(`hsl(${t}turn,${e * 100}%,${n * 100}%)`));
f.prototype.tag = function(t) {
  return this.withContext((e) => ({ ...e, tags: (e.tags || []).concat([t]) }));
};
var Ql = l("filter", (t, e) => e.withHaps((n) => n.filter(t)));
var Ul = l("filterWhen", (t, e) => e.filter((n) => t(n.whole.begin)));
var Kl = l(
  "within",
  (t, e, n, s) => C(
    n(s.filterWhen((r) => r.cyclePos() >= t && r.cyclePos() <= e)),
    s.filterWhen((r) => r.cyclePos() < t || r.cyclePos() > e)
  )
);
f.prototype.stepJoin = function() {
  const t = this, e = J(...jt(Pt(t.queryArc(0, 1))))._steps, n = function(s) {
    const o = t.early(s.span.begin.sam()).query(s.setSpan(new T(h(0), h(1))));
    return J(...jt(Pt(o))).query(s);
  };
  return new f(n, e);
};
f.prototype.stepBind = function(t) {
  return this.fmap(t).stepJoin();
};
function jt(t) {
  const e = t.filter((o, i) => i.hasSteps).reduce((o, i) => o.add(i), h(0)), n = nt(t.map((o, i) => i._steps)).reduce(
    (o, i) => o.add(i),
    h(0)
  ), s = e.eq(0) ? void 0 : n.div(e);
  function r(o, i) {
    return i._steps === void 0 ? [o.mulmaybe(s), i] : [i._steps, i];
  }
  return t.map((o) => r(...o));
}
function Pt(t) {
  const e = Q(t.map((r) => [r.part.begin, r.part.end])), n = Re([h(0), h(1), ...e]);
  return ze(n).map((r) => [
    r[1].sub(r[0]),
    C(...un(new T(...r), t).map((o) => o.value.withHap((i) => i.setContext(i.combineContext(o)))))
  ]);
}
function un(t, e) {
  return nt(e.map((n) => an(t, n)));
}
function an(t, e) {
  const n = t.intersection(e.part);
  if (n != null)
    return new S(e.whole, n, e.value, e.context);
}
var ln = l("pace", function(t, e) {
  return e._steps === void 0 ? e : e._steps.eq(h(0)) ? $ : e._fast(h(t).div(e._steps)).setSteps(t);
});
function pn(t, ...e) {
  const n = e.map((r) => dt(r));
  if (n.length == 0)
    return q;
  t == 0 && (t = n[0][1]);
  const s = [];
  for (const r of n)
    r[1] != 0 && (t == r[1] ? s.push(r[0]) : s.push(r[0]._fast(h(t).div(h(r[1])))));
  return C(...s);
}
function kt(...t) {
  if (Array.isArray(t[0]))
    return pn(0, ...t);
  if (t = t.filter((s) => s.hasSteps), t.length == 0)
    return q;
  const e = U(...t.map((s) => s._steps));
  if (e.eq(h(0)))
    return $;
  const n = C(...t.map((s) => s.pace(e)));
  return n._steps = e, n;
}
function J(...t) {
  if (t.length === 0)
    return $;
  const e = (i) => Array.isArray(i) ? i : [i._steps, i];
  if (t = t.map(e), t.find((i) => i[0] === void 0)) {
    const i = t.map((a) => a[0]).filter((a) => a !== void 0);
    if (i.length === 0)
      return W(...t.map((a) => a[1]));
    if (i.length === t.length)
      return $;
    const u = i.reduce((a, p) => a.add(p), h(0)).div(i.length);
    for (let a of t)
      a[0] === void 0 && (a[0] = u);
  }
  if (t.length == 1)
    return d(t[0][1]).withSteps((u) => t[0][0]);
  const n = t.map((i) => i[0]).reduce((i, u) => i.add(u), h(0));
  let s = h(0);
  const r = [];
  for (const [i, u] of t) {
    if (h(i).eq(0))
      continue;
    const a = s.add(i);
    r.push(d(u)._compress(s.div(n), a.div(n))), s = a;
  }
  const o = C(...r);
  return o._steps = n, o;
}
function fn(...t) {
  t = t.map((r) => Array.isArray(r) ? r.map(d) : [d(r)]);
  const e = U(...t.map((r) => h(r.length)));
  let n = [];
  for (let r = 0; r < e; ++r)
    n.push(...t.map((o) => o.length == 0 ? q : o[r % o.length]));
  n = n.filter((r) => r.hasSteps && r._steps > 0);
  const s = n.reduce((r, o) => r.add(o._steps), h(0));
  return n = J(...n), n._steps = s, n;
}
var hn = rt("take", function(t, e) {
  if (!e.hasSteps || e._steps.lte(0) || (t = h(t), t.eq(0)))
    return $;
  const n = t < 0;
  n && (t = t.abs());
  const s = t.div(e._steps);
  return s.lte(0) ? $ : s.gte(1) ? e : n ? e.zoom(h(1).sub(s), 1) : e.zoom(0, s);
});
var dn = rt("drop", function(t, e) {
  return e.hasSteps ? (t = h(t), t.lt(0) ? e.take(e._steps.add(t)) : e.take(h(0).sub(e._steps.sub(t)))) : $;
});
var mn = rt("extend", function(t, e) {
  return e.fast(t).expand(t);
});
var yn = rt("expand", function(t, e) {
  return e.withSteps((n) => n.mul(h(t)));
});
var gn = rt("contract", function(t, e) {
  return e.withSteps((n) => n.div(h(t)));
});
f.prototype.shrinklist = function(t) {
  const e = this;
  if (!e.hasSteps)
    return [e];
  let [n, s] = Array.isArray(t) ? t : [t, e._steps];
  if (n = h(n), s === 0 || n === 0)
    return [e];
  const r = n > 0, o = [];
  if (r) {
    const i = h(1).div(e._steps).mul(n);
    for (let u = 0; u < s; ++u) {
      const a = i.mul(u);
      if (a.gt(1))
        break;
      o.push([a, 1]);
    }
  } else {
    n = h(0).sub(n);
    const i = h(1).div(e._steps).mul(n);
    for (let u = 0; u < s; ++u) {
      const a = h(1).sub(i.mul(u));
      if (a.lt(0))
        break;
      o.push([h(0), a]);
    }
  }
  return o.map((i) => e.zoom(...i));
};
var wn = (t, e) => e.shrinklist(t);
var bn = l(
  "shrink",
  function(t, e) {
    if (!e.hasSteps)
      return $;
    const n = e.shrinklist(t), s = J(...n);
    return s._steps = n.reduce((r, o) => r.add(o._steps), h(0)), s;
  },
  true,
  false,
  (t) => t.stepJoin()
);
var Xl = l(
  "grow",
  function(t, e) {
    if (!e.hasSteps)
      return $;
    const n = e.shrinklist(h(0).sub(t));
    n.reverse();
    const s = J(...n);
    return s._steps = n.reduce((r, o) => r.add(o._steps), h(0)), s;
  },
  true,
  false,
  (t) => t.stepJoin()
);
var _n = function(t, ...e) {
  return t.tour(...e);
};
f.prototype.tour = function(...t) {
  return J(
    ...[].concat(
      ...t.map((e, n) => [...t.slice(0, t.length - n), this, ...t.slice(t.length - n)]),
      this,
      ...t
    )
  );
};
var vn = function(...t) {
  t = t.filter((s) => s.hasSteps);
  const e = K(...t.map((s) => s._slow(s._steps))), n = U(...t.map((s) => s._steps));
  return e._fast(n).setSteps(n);
};
var Yl = J;
var kn = J;
var Zl = J;
var tp = fn;
var ep = kt;
f.prototype.s_polymeter = f.prototype.polymeter;
var np = bn;
f.prototype.s_taper = f.prototype.shrink;
var sp = wn;
f.prototype.s_taperlist = f.prototype.shrinklist;
var rp = hn;
f.prototype.s_add = f.prototype.take;
var op = dn;
f.prototype.s_sub = f.prototype.drop;
var ip = yn;
f.prototype.s_expand = f.prototype.expand;
var cp = mn;
f.prototype.s_extend = f.prototype.extend;
var up = gn;
f.prototype.s_contract = f.prototype.contract;
var ap = _n;
f.prototype.s_tour = f.prototype.tour;
var lp = vn;
f.prototype.s_zip = f.prototype.zip;
var pp = ln;
f.prototype.steps = f.prototype.pace;
var fp = l("chop", function(t, e) {
  const s = Array.from({ length: t }, (i, u) => u).map((i) => ({ begin: i / t, end: (i + 1) / t })), r = function(i, u) {
    if ("begin" in i && "end" in i && i.begin !== void 0 && i.end !== void 0) {
      const a = i.end - i.begin;
      u = { begin: i.begin + u.begin * a, end: i.begin + u.end * a };
    }
    return Object.assign({}, i, u);
  }, o = function(i) {
    return V(s.map((u) => r(i, u)));
  };
  return e.squeezeBind(o).setSteps(R ? h(t).mulmaybe(e._steps) : void 0);
});
var hp = l("striate", function(t, e) {
  const s = Array.from({ length: t }, (o, i) => i).map((o) => ({ begin: o / t, end: (o + 1) / t })), r = K(...s);
  return e.set(r)._fast(t).setSteps(R ? h(t).mulmaybe(e._steps) : void 0);
});
var Qt = function(t, e, n = 0.5) {
  return e.speed(1 / t * n).unit("c").slow(t);
};
var qn = l(
  "slice",
  function(t, e, n) {
    return t.innerBind(
      (s) => e.outerBind(
        (r) => n.outerBind((o) => {
          o = o instanceof Object ? o : { s: o };
          const i = Array.isArray(s) ? s[r] : r / s, u = Array.isArray(s) ? s[r + 1] : (r + 1) / s;
          return j({ begin: i, end: u, _slices: s, ...o });
        })
      )
    ).setSteps(e._steps);
  },
  false
  // turns off auto-patternification
);
var dp = l(
  "splice",
  function(t, e, n) {
    const s = qn(t, e, n);
    return new f((r) => {
      const o = r.controls._cps || 1;
      return s.query(r).map(
        (u) => u.withValue((a) => ({
          speed: o / a._slices / u.whole.duration * (a.speed || 1),
          unit: "c",
          ...a
        }))
      );
    }).setSteps(e._steps);
  },
  false
  // turns off auto-patternification
);
var { loopAt: mp, loopat: yp } = l(["loopAt", "loopat"], function(t, e) {
  const n = e._steps ? e._steps.div(t) : void 0;
  return new f((s) => Qt(t, e, s.controls._cps).query(s), n);
});
var gp = l(
  "fit",
  (t) => t.withHaps(
    (e, n) => e.map(
      (s) => s.withValue((r) => {
        const o = ("end" in r ? r.end : 1) - ("begin" in r ? r.begin : 0);
        return {
          ...r,
          speed: (n.controls._cps || 1) / s.whole.duration * o,
          unit: "c"
        };
      })
    )
  )
);
var { loopAtCps: wp, loopatcps: bp } = l(["loopAtCps", "loopatcps"], function(t, e, n) {
  return Qt(t, n, e);
});
var _p = (t) => j(1).withValue(() => d(t())).innerJoin();
var Nt = (t) => t < 0.5 ? 1 : 1 - (t - 0.5) / 0.5;
var An = (t, e, n) => {
  e = d(e), t = d(t), n = d(n);
  let s = e.fmap((o) => ({ gain: Nt(o) })), r = e.fmap((o) => ({ gain: Nt(1 - o) }));
  return C(t.mul(s), n.mul(r));
};
f.prototype.xfade = function(t, e) {
  return An(this, t, e);
};
var Sn = (t) => (e, n, s) => {
  e = h(e).mod(n), n = h(n);
  const r = e.div(n), o = e.add(1).div(n);
  return t(s.fmap((i) => j(i)._compress(r, o)));
};
var { beat: vp } = l(
  ["beat"],
  Sn((t) => t.innerJoin())
);
function qt(t) {
  let e = Array.isArray(t);
  t = e ? t : [t];
  const n = t[0], s = (i) => {
    let u;
    if (typeof i == "object" && i.value !== void 0 && (u = { ...i }, i = i.value, delete u.value), e && Array.isArray(i)) {
      const a = u || {};
      return i.forEach((p, m) => {
        m < t.length && (a[t[m]] = p);
      }), a;
    } else return u ? (u[n] = i, u) : { [n]: i };
  }, r = (...i) => V(...i).withValue(s), o = function(...i) {
    return i.length ? this.set(r(...i)) : this.fmap(s);
  };
  return f.prototype[n] = o, r;
}
var mt = /* @__PURE__ */ new Map();
function c(t, ...e) {
  const n = Array.isArray(t) ? t[0] : t;
  let s = {};
  return s[n] = qt(t), e.forEach((r) => {
    s[r] = s[n], mt.set(r, n), f.prototype[r] = f.prototype[n];
  }), s;
}
var { s: Tn, sound: Cn } = c(["s", "n", "gain"], "sound");
var { source: xn, src: Bn } = c("source", "src");
var { n: On } = c("n");
var { note: zn } = c(["note", "n"]);
var { accelerate: En } = c("accelerate");
var { velocity: Mn } = c("velocity");
var { gain: Jn } = c("gain");
var { postgain: jn } = c("postgain");
var { amp: Pn } = c("amp");
var { attack: Nn, att: $n } = c("attack", "att");
var { fmh: Rn } = c(["fmh", "fmi"], "fmh");
var { fmi: Ln, fm: Wn } = c(["fmi", "fmh"], "fm");
var { fmenv: Hn } = c("fmenv");
var { fmattack: In } = c("fmattack");
var { fmdecay: Fn } = c("fmdecay");
var { fmsustain: Vn } = c("fmsustain");
var { fmrelease: Dn } = c("fmrelease");
var { fmvelocity: Gn } = c("fmvelocity");
var { bank: Qn } = c("bank");
var { analyze: Un } = c("analyze");
var { fft: Kn } = c("fft");
var { decay: Xn, dec: Yn } = c("decay", "dec");
var { sustain: Zn, sus: ts } = c("sustain", "sus");
var { release: es, rel: ns } = c("release", "rel");
var { hold: ss } = c("hold");
var { bandf: rs, bpf: os, bp: is } = c(["bandf", "bandq", "bpenv"], "bpf", "bp");
var { bandq: cs, bpq: us } = c("bandq", "bpq");
var { begin: as } = c("begin");
var { end: ls } = c("end");
var { loop: ps } = c("loop");
var { loopBegin: fs, loopb: hs } = c("loopBegin", "loopb");
var { loopEnd: ds, loope: ms } = c("loopEnd", "loope");
var { crush: ys } = c("crush");
var { coarse: gs } = c("coarse");
var { drive: ws } = c("drive");
var { byteBeatExpression: bs, bbexpr: _s } = c("byteBeatExpression", "bbexpr");
var { byteBeatStartTime: vs, bbst: ks } = c("byteBeatStartTime", "bbst");
var { channels: qs, ch: As } = c("channels", "ch");
var { pw: Ss } = c(["pw", "pwrate", "pwsweep"]);
var { pwrate: Ts } = c("pwrate");
var { pwsweep: Cs } = c("pwsweep");
var { phaserrate: xs, ph: Bs, phaser: Os } = c(
  ["phaserrate", "phaserdepth", "phasercenter", "phasersweep"],
  "ph",
  "phaser"
);
var { phasersweep: zs, phs: Es } = c("phasersweep", "phs");
var { phasercenter: Ms, phc: Js } = c("phasercenter", "phc");
var { phaserdepth: js, phd: Ps, phasdp: Ns } = c("phaserdepth", "phd", "phasdp");
var { channel: $s } = c("channel");
var { cut: Rs } = c("cut");
var { cutoff: Ls, ctf: Ws, lpf: Hs, lp: Is } = c(["cutoff", "resonance", "lpenv"], "ctf", "lpf", "lp");
var { lpenv: Fs, lpe: Vs } = c("lpenv", "lpe");
var { hpenv: Ds, hpe: Gs } = c("hpenv", "hpe");
var { bpenv: Qs, bpe: Us } = c("bpenv", "bpe");
var { lpattack: Ks, lpa: Xs } = c("lpattack", "lpa");
var { hpattack: Ys, hpa: Zs } = c("hpattack", "hpa");
var { bpattack: tr, bpa: er } = c("bpattack", "bpa");
var { lpdecay: nr, lpd: sr } = c("lpdecay", "lpd");
var { hpdecay: rr, hpd: or } = c("hpdecay", "hpd");
var { bpdecay: ir, bpd: cr } = c("bpdecay", "bpd");
var { lpsustain: ur, lps: ar } = c("lpsustain", "lps");
var { hpsustain: lr, hps: pr } = c("hpsustain", "hps");
var { bpsustain: fr, bps: hr } = c("bpsustain", "bps");
var { lprelease: dr, lpr: mr } = c("lprelease", "lpr");
var { hprelease: yr, hpr: gr } = c("hprelease", "hpr");
var { bprelease: wr, bpr: br } = c("bprelease", "bpr");
var { ftype: _r } = c("ftype");
var { fanchor: vr } = c("fanchor");
var { vib: kr, vibrato: qr, v: Ar } = c(["vib", "vibmod"], "vibrato", "v");
var { noise: Sr } = c("noise");
var { vibmod: Tr, vmod: Cr } = c(["vibmod", "vib"], "vmod");
var { hcutoff: xr, hpf: Br, hp: Or } = c(["hcutoff", "hresonance", "hpenv"], "hpf", "hp");
var { hresonance: zr, hpq: Er } = c("hresonance", "hpq");
var { resonance: Mr, lpq: Jr } = c("resonance", "lpq");
var { djf: jr } = c("djf");
var { delay: Pr } = c(["delay", "delaytime", "delayfeedback"]);
var { delayfeedback: Nr, delayfb: $r, dfb: Rr } = c("delayfeedback", "delayfb", "dfb");
var { delaytime: Lr, delayt: Wr, dt: Hr } = c("delaytime", "delayt", "dt");
var { lock: Ir } = c("lock");
var { detune: Fr, det: Vr } = c("detune", "det");
var { unison: Dr } = c("unison");
var { spread: Gr } = c("spread");
var { dry: Qr } = c("dry");
var { fadeTime: Ur, fadeOutTime: Kr } = c("fadeTime", "fadeOutTime");
var { fadeInTime: Xr } = c("fadeInTime");
var { freq: Yr } = c("freq");
var { pattack: Zr, patt: to } = c("pattack", "patt");
var { pdecay: eo, pdec: no } = c("pdecay", "pdec");
var { psustain: so, psus: ro } = c("psustain", "psus");
var { prelease: oo, prel: io } = c("prelease", "prel");
var { penv: co } = c("penv");
var { pcurve: uo } = c("pcurve");
var { panchor: ao } = c("panchor");
var { gate: lo, gat: po } = c("gate", "gat");
var { leslie: fo } = c("leslie");
var { lrate: ho } = c("lrate");
var { lsize: mo } = c("lsize");
var { activeLabel: yo } = c("activeLabel");
var { label: go } = c(["label", "activeLabel"]);
var { degree: wo } = c("degree");
var { mtranspose: bo } = c("mtranspose");
var { ctranspose: _o } = c("ctranspose");
var { harmonic: vo } = c("harmonic");
var { stepsPerOctave: ko } = c("stepsPerOctave");
var { octaveR: qo } = c("octaveR");
var { nudge: Ao } = c("nudge");
var { octave: So } = c("octave");
var { orbit: To } = c("orbit");
var { overgain: Co } = c("overgain");
var { overshape: xo } = c("overshape");
var { pan: Bo } = c("pan");
var { panspan: Oo } = c("panspan");
var { pansplay: zo } = c("pansplay");
var { panwidth: Eo } = c("panwidth");
var { panorient: Mo } = c("panorient");
var { rate: Jo } = c("rate");
var { slide: jo } = c("slide");
var { semitone: Po } = c("semitone");
var { voice: No } = c("voice");
var { chord: $o } = c("chord");
var { dictionary: Ro, dict: Lo } = c("dictionary", "dict");
var { anchor: Wo } = c("anchor");
var { offset: Ho } = c("offset");
var { octaves: Io } = c("octaves");
var { mode: Fo } = c(["mode", "anchor"]);
var { room: Vo } = c(["room", "size"]);
var { roomlp: Do, rlp: Go } = c("roomlp", "rlp");
var { roomdim: Qo, rdim: Uo } = c("roomdim", "rdim");
var { roomfade: Ko, rfade: Xo } = c("roomfade", "rfade");
var { ir: Yo, iresponse: Zo } = c(["ir", "i"], "iresponse");
var { roomsize: ti, size: ei, sz: ni, rsize: si } = c("roomsize", "size", "sz", "rsize");
var { shape: ri } = c(["shape", "shapevol"]);
var { distort: oi, dist: ii } = c(["distort", "distortvol"], "dist");
var { compressor: ci } = c([
  "compressor",
  "compressorRatio",
  "compressorKnee",
  "compressorAttack",
  "compressorRelease"
]);
var { compressorKnee: ui } = c("compressorKnee");
var { compressorRatio: ai } = c("compressorRatio");
var { compressorAttack: li } = c("compressorAttack");
var { compressorRelease: pi } = c("compressorRelease");
var { speed: Ut } = c("speed");
var { stretch: fi } = c("stretch");
var { unit: hi } = c("unit");
var { squiz: di } = c("squiz");
var { vowel: mi } = c("vowel");
var { waveloss: yi } = c("waveloss");
var { density: gi } = c("density");
var { expression: wi } = c("expression");
var { sustainpedal: bi } = c("sustainpedal");
var { tremolodepth: _i, tremdp: vi } = c("tremolodepth", "tremdp");
var { tremolorate: ki, tremr: qi } = c("tremolorate", "tremr");
var { fshift: Ai } = c("fshift");
var { fshiftnote: Si } = c("fshiftnote");
var { fshiftphase: Ti } = c("fshiftphase");
var { triode: Ci } = c("triode");
var { krush: xi } = c("krush");
var { kcutoff: Bi } = c("kcutoff");
var { octer: Oi } = c("octer");
var { octersub: zi } = c("octersub");
var { octersubsub: Ei } = c("octersubsub");
var { ring: Mi } = c("ring");
var { ringf: Ji } = c("ringf");
var { ringdf: ji } = c("ringdf");
var { freeze: Pi } = c("freeze");
var { xsdelay: Ni } = c("xsdelay");
var { tsdelay: $i } = c("tsdelay");
var { real: Ri } = c("real");
var { imag: Li } = c("imag");
var { enhance: Wi } = c("enhance");
var { partials: Hi } = c("partials");
var { comb: Ii } = c("comb");
var { smear: Fi } = c("smear");
var { scram: Vi } = c("scram");
var { binshift: Di } = c("binshift");
var { hbrick: Gi } = c("hbrick");
var { lbrick: Qi } = c("lbrick");
var { frameRate: Ui } = c("frameRate");
var { frames: Ki } = c("frames");
var { hours: Xi } = c("hours");
var { minutes: Yi } = c("minutes");
var { seconds: Zi } = c("seconds");
var { songPtr: tc } = c("songPtr");
var { uid: ec } = c("uid");
var { val: nc } = c("val");
var { cps: sc } = c("cps");
var { clip: rc, legato: oc } = c("clip", "legato");
var { duration: ic, dur: cc } = c("duration", "dur");
var { zrand: uc } = c("zrand");
var { curve: ac } = c("curve");
var { deltaSlide: lc } = c("deltaSlide");
var { pitchJump: pc } = c("pitchJump");
var { pitchJumpTime: fc } = c("pitchJumpTime");
var { lfo: hc, repeatTime: dc } = c("lfo", "repeatTime");
var { znoise: mc } = c("znoise");
var { zmod: yc } = c("zmod");
var { zcrush: gc } = c("zcrush");
var { zdelay: wc } = c("zdelay");
var { tremolo: bc } = c("tremolo");
var { zzfx: _c } = c("zzfx");
var { color: vc, colour: kc } = c(["color", "colour"]);
var qc = (...t) => t.reduce((e, n) => Object.assign(e, { [n]: qt(n) }), {});
var Ac = l("adsr", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s, r, o] = t;
  return e.set({ attack: n, decay: s, sustain: r, release: o });
});
var Sc = l("ad", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = n] = t;
  return e.attack(n).decay(s);
});
var Tc = l("ds", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = 0] = t;
  return e.set({ decay: n, sustain: s });
});
var Cc = l("ar", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = n] = t;
  return e.set({ attack: n, release: s });
});
var { midichan: xc } = c("midichan");
var { midimap: Bc } = c("midimap");
var { midiport: Oc } = c("midiport");
var { midicmd: zc } = c("midicmd");
var Ec = l("control", (t, e) => {
  if (!Array.isArray(t))
    throw new Error("control expects an array of [ccn, ccv]");
  const [n, s] = t;
  return e.ccn(n).ccv(s);
});
var { ccn: Mc } = c("ccn");
var { ccv: Jc } = c("ccv");
var { ctlNum: jc } = c("ctlNum");
var { nrpnn: Pc } = c("nrpnn");
var { nrpv: Nc } = c("nrpv");
var { progNum: $c } = c("progNum");
var Rc = l("sysex", (t, e) => {
  if (!Array.isArray(t))
    throw new Error("sysex expects an array of [id, data]");
  const [n, s] = t;
  return e.sysexid(n).sysexdata(s);
});
var { sysexid: Lc } = c("sysexid");
var { sysexdata: Wc } = c("sysexdata");
var { midibend: Hc } = c("midibend");
var { miditouch: Ic } = c("miditouch");
var { polyTouch: Fc } = c("polyTouch");
var Kt = (t) => mt.has(t) ? mt.get(t) : t;
var Vc = l("as", (t, e) => (t = Array.isArray(t) ? t : [t], e.fmap((n) => (n = Array.isArray(n) ? n : [n], n = Object.fromEntries(t.map((s, r) => [Kt(s), n[r]])), n))));
var Dc = l(
  "scrub",
  (t, e) => t.outerBind((n) => {
    Array.isArray(n) || (n = [n]);
    const [s, r = 1] = n;
    return e.begin(s).mul(Ut(r)).clip(1);
  }),
  false
);
var kp = Object.freeze(Object.defineProperty({
  __proto__: null,
  accelerate: En,
  activeLabel: yo,
  ad: Sc,
  adsr: Ac,
  amp: Pn,
  analyze: Un,
  anchor: Wo,
  ar: Cc,
  as: Vc,
  att: $n,
  attack: Nn,
  bandf: rs,
  bandq: cs,
  bank: Qn,
  bbexpr: _s,
  bbst: ks,
  begin: as,
  binshift: Di,
  bp: is,
  bpa: er,
  bpattack: tr,
  bpd: cr,
  bpdecay: ir,
  bpe: Us,
  bpenv: Qs,
  bpf: os,
  bpq: us,
  bpr: br,
  bprelease: wr,
  bps: hr,
  bpsustain: fr,
  byteBeatExpression: bs,
  byteBeatStartTime: vs,
  ccn: Mc,
  ccv: Jc,
  ch: As,
  channel: $s,
  channels: qs,
  chord: $o,
  clip: rc,
  coarse: gs,
  color: vc,
  colour: kc,
  comb: Ii,
  compressor: ci,
  compressorAttack: li,
  compressorKnee: ui,
  compressorRatio: ai,
  compressorRelease: pi,
  control: Ec,
  cps: sc,
  createParam: qt,
  createParams: qc,
  crush: ys,
  ctf: Ws,
  ctlNum: jc,
  ctranspose: _o,
  curve: ac,
  cut: Rs,
  cutoff: Ls,
  dec: Yn,
  decay: Xn,
  degree: wo,
  delay: Pr,
  delayfb: $r,
  delayfeedback: Nr,
  delayt: Wr,
  delaytime: Lr,
  deltaSlide: lc,
  density: gi,
  det: Vr,
  detune: Fr,
  dfb: Rr,
  dict: Lo,
  dictionary: Ro,
  dist: ii,
  distort: oi,
  djf: jr,
  drive: ws,
  dry: Qr,
  ds: Tc,
  dt: Hr,
  dur: cc,
  duration: ic,
  end: ls,
  enhance: Wi,
  expression: wi,
  fadeInTime: Xr,
  fadeOutTime: Kr,
  fadeTime: Ur,
  fanchor: vr,
  fft: Kn,
  fm: Wn,
  fmattack: In,
  fmdecay: Fn,
  fmenv: Hn,
  fmh: Rn,
  fmi: Ln,
  fmrelease: Dn,
  fmsustain: Vn,
  fmvelocity: Gn,
  frameRate: Ui,
  frames: Ki,
  freeze: Pi,
  freq: Yr,
  fshift: Ai,
  fshiftnote: Si,
  fshiftphase: Ti,
  ftype: _r,
  gain: Jn,
  gat: po,
  gate: lo,
  getControlName: Kt,
  harmonic: vo,
  hbrick: Gi,
  hcutoff: xr,
  hold: ss,
  hours: Xi,
  hp: Or,
  hpa: Zs,
  hpattack: Ys,
  hpd: or,
  hpdecay: rr,
  hpe: Gs,
  hpenv: Ds,
  hpf: Br,
  hpq: Er,
  hpr: gr,
  hprelease: yr,
  hps: pr,
  hpsustain: lr,
  hresonance: zr,
  imag: Li,
  ir: Yo,
  iresponse: Zo,
  kcutoff: Bi,
  krush: xi,
  label: go,
  lbrick: Qi,
  legato: oc,
  leslie: fo,
  lfo: hc,
  lock: Ir,
  loop: ps,
  loopBegin: fs,
  loopEnd: ds,
  loopb: hs,
  loope: ms,
  lp: Is,
  lpa: Xs,
  lpattack: Ks,
  lpd: sr,
  lpdecay: nr,
  lpe: Vs,
  lpenv: Fs,
  lpf: Hs,
  lpq: Jr,
  lpr: mr,
  lprelease: dr,
  lps: ar,
  lpsustain: ur,
  lrate: ho,
  lsize: mo,
  midibend: Hc,
  midichan: xc,
  midicmd: zc,
  midimap: Bc,
  midiport: Oc,
  miditouch: Ic,
  minutes: Yi,
  mode: Fo,
  mtranspose: bo,
  n: On,
  noise: Sr,
  note: zn,
  nrpnn: Pc,
  nrpv: Nc,
  nudge: Ao,
  octave: So,
  octaveR: qo,
  octaves: Io,
  octer: Oi,
  octersub: zi,
  octersubsub: Ei,
  offset: Ho,
  orbit: To,
  overgain: Co,
  overshape: xo,
  pan: Bo,
  panchor: ao,
  panorient: Mo,
  panspan: Oo,
  pansplay: zo,
  panwidth: Eo,
  partials: Hi,
  patt: to,
  pattack: Zr,
  pcurve: uo,
  pdec: no,
  pdecay: eo,
  penv: co,
  ph: Bs,
  phasdp: Ns,
  phaser: Os,
  phasercenter: Ms,
  phaserdepth: js,
  phaserrate: xs,
  phasersweep: zs,
  phc: Js,
  phd: Ps,
  phs: Es,
  pitchJump: pc,
  pitchJumpTime: fc,
  polyTouch: Fc,
  postgain: jn,
  prel: io,
  prelease: oo,
  progNum: $c,
  psus: ro,
  psustain: so,
  pw: Ss,
  pwrate: Ts,
  pwsweep: Cs,
  rate: Jo,
  rdim: Uo,
  real: Ri,
  registerControl: c,
  rel: ns,
  release: es,
  repeatTime: dc,
  resonance: Mr,
  rfade: Xo,
  ring: Mi,
  ringdf: ji,
  ringf: Ji,
  rlp: Go,
  room: Vo,
  roomdim: Qo,
  roomfade: Ko,
  roomlp: Do,
  roomsize: ti,
  rsize: si,
  s: Tn,
  scram: Vi,
  scrub: Dc,
  seconds: Zi,
  semitone: Po,
  shape: ri,
  size: ei,
  slide: jo,
  smear: Fi,
  songPtr: tc,
  sound: Cn,
  source: xn,
  speed: Ut,
  spread: Gr,
  squiz: di,
  src: Bn,
  stepsPerOctave: ko,
  stretch: fi,
  sus: ts,
  sustain: Zn,
  sustainpedal: bi,
  sysex: Rc,
  sysexdata: Wc,
  sysexid: Lc,
  sz: ni,
  tremdp: vi,
  tremolo: bc,
  tremolodepth: _i,
  tremolorate: ki,
  tremr: qi,
  triode: Ci,
  tsdelay: $i,
  uid: ec,
  unison: Dr,
  unit: hi,
  v: Ar,
  val: nc,
  velocity: Mn,
  vib: kr,
  vibmod: Tr,
  vibrato: qr,
  vmod: Cr,
  voice: No,
  vowel: mi,
  waveloss: yi,
  xsdelay: Ni,
  zcrush: gc,
  zdelay: wc,
  zmod: yc,
  znoise: mc,
  zrand: uc,
  zzfx: _c
}, Symbol.toStringTag, { value: "Module" }));
var Gc = function(t, e) {
  const [n, s] = t, [r, o] = e, [i, u] = Ft(s, r);
  return [
    [s, n - s],
    [Vt((a, p) => a.concat(p), i, o), u]
  ];
};
var Qc = function(t, e) {
  const [n, s] = t, [r, o] = e, [i, u] = Ft(n, o);
  return [
    [n, s - n],
    [Vt((p, m) => p.concat(m), r, i), u]
  ];
};
var Xt = function(t, e) {
  const [n, s] = t;
  return Math.min(n, s) <= 1 ? [t, e] : Xt(...n > s ? Gc(t, e) : Qc(t, e));
};
var Uc = function(t, e) {
  const n = t < 0;
  t = Math.abs(t);
  const s = e - t, r = Array(t).fill([1]), o = Array(s).fill([0]), i = Xt([t, s], [r, o]), u = Q(i[1][0]).concat(Q(i[1][1]));
  return n ? u.map((a) => a === 0 ? 1 : 0) : u;
};
var At = function(t, e, n) {
  const s = Uc(t, e);
  return n ? xe(s, -n) : s;
};
var qp = l("euclid", function(t, e, n) {
  return n.struct(At(t, e, 0));
});
var { euclidrot: Ap, euclidRot: Sp } = l(["euclidrot", "euclidRot"], function(t, e, n, s) {
  return s.struct(At(t, e, n));
});
var Yt = function(t, e, n, s) {
  if (t < 1)
    return q;
  const o = At(t, e, n).join("").split("1").slice(1).map((i) => [i.length + 1, true]);
  return s.struct(kn(...o));
};
var Tp = l(["euclidLegato"], function(t, e, n) {
  return Yt(t, e, 0, n);
});
var Cp = l(["euclidLegatoRot"], function(t, e, n, s) {
  return Yt(t, e, n, s);
});
function Kc(t, e, n = 0.05, s = 0.1, r = 0.1, o = globalThis.setInterval, i = globalThis.clearInterval, u = true) {
  let a = 0, p = 0, m = 10 ** 4, y = 0.01;
  const _ = (P2) => n = P2(n);
  r = r || s / 2;
  const w = () => {
    const P2 = t(), D = P2 + s + r;
    for (p === 0 && (p = P2 + y); p < D; )
      p = u ? Math.round(p * m) / m : p, e(p, n, a, P2), p += n, a++;
  };
  let b;
  const O = () => {
    x(), w(), b = o(w, s * 1e3);
  }, x = () => {
    b !== void 0 && i(b), b = void 0;
  };
  return { setDuration: _, start: O, stop: () => {
    a = 0, p = 0, x();
  }, pause: () => x(), duration: n, interval: s, getPhase: () => p, minLatency: y };
}
function xp(t) {
  return new f((e) => [new S(void 0, e.span, t)]);
}
var H = (t) => {
  const e = (n) => [new S(void 0, n.span, t(n.span.begin))];
  return new f(e);
};
var at = H((t) => t % 1);
var Zt = at.toBipolar();
var St = H((t) => 1 - t % 1);
var te = St.toBipolar();
var ee = H((t) => Math.sin(Math.PI * 2 * t));
var Xc = ee.fromBipolar();
var Bp = Xc._early(h(1).div(4));
var Op = ee._early(h(1).div(4));
var Yc = H((t) => Math.floor(t * 2 % 2));
var zp = Yc.toBipolar();
var Ep = W(at, St);
var Mp = W(Zt, te);
var Jp = W(St, at);
var jp = W(te, Zt);
var Zc = H(Z);
var Tt = 0;
var Ct = 0;
typeof window < "u" && document.addEventListener("mousemove", (t) => {
  Tt = t.clientY / document.body.clientHeight, Ct = t.clientX / document.body.clientWidth;
});
var Pp = H(() => Tt);
var Np = H(() => Tt);
var $p = H(() => Ct);
var Rp = H(() => Ct);
var ne = (t) => {
  const e = t << 13 ^ t, n = e >> 17 ^ e;
  return n << 5 ^ n;
};
var tu = (t) => t - Math.trunc(t);
var se = (t) => ne(Math.trunc(tu(t / 300) * 536870912));
var re = (t) => t % 536870912 / 536870912;
var yt = (t) => Math.abs(re(se(t)));
var eu = (t, e) => {
  const n = [];
  for (let s = 0; s < e; ++s)
    n.push(re(t)), t = ne(t);
  return n;
};
var nu = (t, e) => eu(se(t), e);
var su = (t) => at.range(0, t).round().segment(t);
var Lp = (t) => {
  const e = d(t).log2(0).floor().add(1);
  return ru(t, e);
};
var ru = (t, e = 16) => {
  e = d(e);
  const n = su(e).mul(-1).add(e.sub(1));
  return d(t).segment(e).brshift(n).band(j(1));
};
var ou = (t) => H((e) => {
  const s = nu(e.floor().add(0.5), t).map((o, i) => [o, i]).sort((o, i) => o[0] > i[0] - o[0] < i[0]).map((o) => o[1]), r = e.cyclePos().mul(t).floor() % t;
  return s[r];
})._segment(t);
var oe = (t, e, n) => {
  const s = [...Array(e).keys()].map((r) => n.zoom(h(r).div(e), h(r + 1).div(e)));
  return t.fmap((r) => s[r].repeatCycles(e)._fast(e)).innerJoin();
};
var Wp = l("shuffle", (t, e) => oe(ou(t), t, e));
var Hp = l("scramble", (t, e) => oe(ce(t)._segment(t), t, e));
var L = H(yt);
var Ip = L.toBipolar();
var ie = (t) => L.fmap((e) => e < t);
var Fp = (t) => d(t).fmap(ie).innerJoin();
var Vp = ie(0.5);
var ce = (t) => L.fmap((e) => Math.trunc(e * t));
var Dp = (t) => d(t).fmap(ce).innerJoin();
var ue = (t, e) => (e = e.map(d), e.length == 0 ? q : t.range(0, e.length).fmap((n) => {
  const s = Math.min(Math.max(Math.floor(n), 0), e.length - 1);
  return e[s];
}));
var xt = (t, e) => ue(t, e).outerJoin();
var iu = (t, e) => ue(t, e).innerJoin();
var Gp = (...t) => xt(L, t);
f.prototype.choose = function(...t) {
  return xt(this, t);
};
f.prototype.choose2 = function(...t) {
  return xt(this.fromBipolar(), t);
};
var cu = (...t) => iu(L.segment(1), t);
var Qp = cu;
var ae = function(t, ...e) {
  const n = e.map((u) => d(u[0])), s = [];
  let r = j(0);
  for (const u of e)
    r = r.add(u[1]), s.push(r);
  const o = Ze(s), i = function(u) {
    const a = r.mul(u);
    return o.fmap((p) => (m) => n[p.findIndex((y) => y > m, p)]).appLeft(a);
  };
  return t.bind(i);
};
var uu = (...t) => ae(...t).outerJoin();
var Up = (...t) => uu(L, ...t);
var au = (...t) => ae(L.segment(1), ...t).innerJoin();
var Kp = au;
var lu = (t) => {
  const e = t.fmap(Math.floor), n = t.fmap((o) => Math.floor(o) + 1), s = (o) => 6 * o ** 5 - 15 * o ** 4 + 10 * o ** 3, r = (o) => (i) => (u) => i + s(o) * (u - i);
  return t.sub(e).fmap(r).appBoth(e.fmap(yt)).appBoth(n.fmap(yt));
};
var Xp = lu(Zc.fmap((t) => Number(t)));
var Yp = l(
  "degradeByWith",
  (t, e, n) => n.fmap((s) => (r) => s).appLeft(t.filterValues((s) => s > e)),
  true,
  true
);
var Zp = l(
  "degradeBy",
  function(t, e) {
    return e._degradeByWith(L, t);
  },
  true,
  true
);
var tf = l("degrade", (t) => t._degradeBy(0.5), true, true);
var ef = l(
  "undegradeBy",
  function(t, e) {
    return e._degradeByWith(
      L.fmap((n) => 1 - n),
      t
    );
  },
  true,
  true
);
var nf = l("undegrade", (t) => t._undegradeBy(0.5), true, true);
var sf = l("sometimesBy", function(t, e, n) {
  return d(t).fmap((s) => C(n._degradeBy(s), e(n._undegradeBy(1 - s)))).innerJoin();
});
var rf = l("sometimes", function(t, e) {
  return e._sometimesBy(0.5, t);
});
var of = l("someCyclesBy", function(t, e, n) {
  return d(t).fmap(
    (s) => C(
      n._degradeByWith(L._segment(1), s),
      e(n._degradeByWith(L.fmap((r) => 1 - r)._segment(1), 1 - s))
    )
  ).innerJoin();
});
var cf = l("someCycles", function(t, e) {
  return e._someCyclesBy(0.5, t);
});
var uf = l("often", function(t, e) {
  return e.sometimesBy(0.75, t);
});
var af = l("rarely", function(t, e) {
  return e.sometimesBy(0.25, t);
});
var lf = l("almostNever", function(t, e) {
  return e.sometimesBy(0.1, t);
});
var pf = l("almostAlways", function(t, e) {
  return e.sometimesBy(0.9, t);
});
var ff = l("never", function(t, e) {
  return e;
});
var hf = l("always", function(t, e) {
  return t(e);
});
function le(t) {
  Array.isArray(t) === false && (t = [t]);
  const e = De();
  return t.every((n) => {
    const s = Ve.get(n) ?? n;
    return e[s];
  });
}
var df = l("whenKey", function(t, e, n) {
  return n.when(le(t), e);
});
var mf = l("keyDown", function(t) {
  return t.fmap(le);
});
var F = function(t, e, n = true) {
  const s = Array.isArray(t), r = Object.keys(t).length;
  return t = He(t, d), r === 0 ? q : e.fmap((o) => {
    let i = o;
    return s && (i = n ? Math.round(i) % r : Ee(Math.round(i), 0, t.length - 1)), t[i];
  });
};
var pu = function(t, e) {
  return Array.isArray(e) && ([e, t] = [t, e]), fu(t, e);
};
var fu = l("pick", function(t, e) {
  return F(t, e, false).innerJoin();
});
var hu = l("pickmod", function(t, e) {
  return F(t, e, true).innerJoin();
});
var yf = l("pickF", function(t, e, n) {
  return n.apply(pu(t, e));
});
var gf = l("pickmodF", function(t, e, n) {
  return n.apply(hu(t, e));
});
var wf = l("pickOut", function(t, e) {
  return F(t, e, false).outerJoin();
});
var bf = l("pickmodOut", function(t, e) {
  return F(t, e, true).outerJoin();
});
var _f = l("pickRestart", function(t, e) {
  return F(t, e, false).restartJoin();
});
var vf = l("pickmodRestart", function(t, e) {
  return F(t, e, true).restartJoin();
});
var kf = l("pickReset", function(t, e) {
  return F(t, e, false).resetJoin();
});
var qf = l("pickmodReset", function(t, e) {
  return F(t, e, true).resetJoin();
});
var { inhabit: Af, pickSqueeze: Sf } = l(["inhabit", "pickSqueeze"], function(t, e) {
  return F(t, e, false).squeezeJoin();
});
var { inhabitmod: Tf, pickmodSqueeze: Cf } = l(["inhabitmod", "pickmodSqueeze"], function(t, e) {
  return F(t, e, true).squeezeJoin();
});
var xf = (t, e) => (e = e.map(d), e.length == 0 ? q : t.fmap((n) => {
  const s = ut(Math.round(n), e.length);
  return e[s];
}).squeezeJoin());
var it;
try {
  it = window == null ? void 0 : window.speechSynthesis;
} catch {
  console.warn("cannot use window: not in browser?");
}
var $t = it == null ? void 0 : it.getVoices();
function du(t, e, n) {
  it.cancel();
  const s = new SpeechSynthesisUtterance(t);
  s.lang = e, $t = it.getVoices();
  const r = $t.filter((o) => o.lang.includes(e));
  typeof n == "number" ? s.voice = r[n % r.length] : typeof n == "string" && (s.voice = r.find((o) => o.name === o)), speechSynthesis.speak(s);
}
var Bf = l("speak", function(t, e, n) {
  return n.onTrigger((s, r) => {
    du(r.value, t, e);
  });
});
var mu = async (...t) => {
  const e = await Promise.allSettled(t), n = e.filter((s) => s.status === "fulfilled").map((s) => s.value);
  return e.forEach((s, r) => {
    s.status === "rejected" && console.warn(`evalScope: module with index ${r} could not be loaded:`, s.reason);
  }), n.forEach((s) => {
    Object.entries(s).forEach(([r, o]) => {
      globalThis[r] = o;
    });
  }), n;
};
function yu(t, e = {}) {
  const { wrapExpression: n = true, wrapAsync: s = true } = e;
  n && (t = `{${t}}`), s && (t = `(async ()=>${t})()`);
  const r = `"use strict";return (${t})`;
  return Function(r)();
}
var gu = async (t, e, n) => {
  let s = {};
  if (e) {
    const i = e(t, n);
    t = i.output, s = i;
  }
  return { mode: "javascript", pattern: await yu(t, { wrapExpression: !!e }), meta: s };
};
var wu = class {
  constructor({ onTrigger: e, onToggle: n, getTime: s }) {
    this.started = false, this.cps = 0.5, this.lastTick = 0, this.getTime = s, this.time_at_last_tick_message = 0, this.collator = new Ie({ getTargetClockTime: s }), this.onToggle = n, this.latency = 0.1, this.cycle = 0, this.id = Math.round(Date.now() * Math.random()), this.worker = new SharedWorker(new URL(
      /* @vite-ignore */
      "" + new URL("assets/clockworker-ZDiUtESR.js", import.meta.url).href,
      import.meta.url
    )), this.worker.port.start(), this.channel = new BroadcastChannel("strudeltick");
    const r = (i) => {
      const { cps: u, begin: a, end: p, cycle: m, time: y } = i;
      this.cps = u, this.cycle = m;
      const _ = this.collator.calculateOffset(y) + y;
      o(a, p, _), this.time_at_last_tick_message = _;
    }, o = (i, u, a) => {
      if (this.started === false)
        return;
      this.pattern.queryArc(i, u, { _cps: this.cps }).forEach((m) => {
        if (m.hasOnset()) {
          const _ = Jt(m.whole.begin - this.cycle, this.cps) + a + this.latency, w = Jt(m.duration, this.cps);
          e == null ? void 0 : e(m, 0, w, this.cps, _);
        }
      });
    };
    this.channel.onmessage = (i) => {
      if (!this.started)
        return;
      const { payload: u, type: a } = i.data;
      switch (a) {
        case "tick":
          r(u);
      }
    };
  }
  sendMessage(e, n) {
    this.worker.port.postMessage({ type: e, payload: n, id: this.id });
  }
  now() {
    const e = (this.getTime() - this.time_at_last_tick_message) * this.cps;
    return this.cycle + e;
  }
  setCps(e = 1) {
    this.sendMessage("cpschange", { cps: e });
  }
  setCycle(e) {
    this.sendMessage("setcycle", { cycle: e });
  }
  setStarted(e) {
    var _a2;
    this.sendMessage("toggle", { started: e }), this.started = e, (_a2 = this.onToggle) == null ? void 0 : _a2.call(this, e);
  }
  start() {
    E("[cyclist] start"), this.setStarted(true);
  }
  stop() {
    E("[cyclist] stop"), this.collator.reset(), this.setStarted(false);
  }
  setPattern(e, n = false) {
    this.pattern = e, n && !this.started && this.start();
  }
  log(e, n, s) {
    const r = s.filter((o) => o.hasOnset());
    console.log(`${e.toFixed(4)} - ${n.toFixed(4)} ${Array(r.length).fill("I").join("")}`);
  }
};
var bu = class {
  constructor({
    interval: e,
    onTrigger: n,
    onToggle: s,
    onError: r,
    getTime: o,
    latency: i = 0.1,
    setInterval: u,
    clearInterval: a,
    beforeStart: p
  }) {
    this.started = false, this.beforeStart = p, this.cps = 0.5, this.num_ticks_since_cps_change = 0, this.lastTick = 0, this.lastBegin = 0, this.lastEnd = 0, this.getTime = o, this.num_cycles_at_cps_change = 0, this.seconds_at_cps_change, this.onToggle = s, this.latency = i, this.clock = Kc(
      o,
      // called slightly before each cycle
      (m, y, _, w) => {
        this.num_ticks_since_cps_change === 0 && (this.num_cycles_at_cps_change = this.lastEnd, this.seconds_at_cps_change = m), this.num_ticks_since_cps_change++;
        const O = this.num_ticks_since_cps_change * y * this.cps;
        try {
          const x = this.lastEnd;
          this.lastBegin = x;
          const I = this.num_cycles_at_cps_change + O;
          if (this.lastEnd = I, this.lastTick = m, m < w) {
            console.log("skip query: too late");
            return;
          }
          this.pattern.queryArc(x, I, { _cps: this.cps }).forEach((z) => {
            if (z.hasOnset()) {
              const P2 = (z.whole.begin - this.num_cycles_at_cps_change) / this.cps + this.seconds_at_cps_change + i, D = z.duration / this.cps, G = P2 - m;
              n == null ? void 0 : n(z, G, D, this.cps, P2), z.value.cps !== void 0 && this.cps != z.value.cps && (this.cps = z.value.cps, this.num_ticks_since_cps_change = 0);
            }
          });
        } catch (x) {
          E(`[cyclist] error: ${x.message}`), r == null ? void 0 : r(x);
        }
      },
      e,
      // duration of each cycle
      0.1,
      0.1,
      u,
      a
    );
  }
  now() {
    if (!this.started)
      return 0;
    const e = this.getTime() - this.lastTick - this.clock.duration;
    return this.lastBegin + e * this.cps;
  }
  setStarted(e) {
    var _a2;
    this.started = e, (_a2 = this.onToggle) == null ? void 0 : _a2.call(this, e);
  }
  async start() {
    var _a2;
    if (await ((_a2 = this.beforeStart) == null ? void 0 : _a2.call(this)), this.num_ticks_since_cps_change = 0, this.num_cycles_at_cps_change = 0, !this.pattern)
      throw new Error("Scheduler: no pattern set! call .setPattern first.");
    E("[cyclist] start"), this.clock.start(), this.setStarted(true);
  }
  pause() {
    E("[cyclist] pause"), this.clock.pause(), this.setStarted(false);
  }
  stop() {
    E("[cyclist] stop"), this.clock.stop(), this.lastEnd = 0, this.setStarted(false);
  }
  async setPattern(e, n = false) {
    this.pattern = e, n && !this.started && await this.start();
  }
  setCps(e = 0.5) {
    this.cps !== e && (this.cps = e, this.num_ticks_since_cps_change = 0);
  }
  log(e, n, s) {
    const r = s.filter((o) => o.hasOnset());
    console.log(`${e.toFixed(4)} - ${n.toFixed(4)} ${Array(r.length).fill("I").join("")}`);
  }
};
var gt;
function Of() {
  if (!gt)
    throw new Error("no time set! use setTime to define a time source");
  return gt();
}
function Rt(t) {
  gt = t;
}
function zf({
  defaultOutput: t,
  onEvalError: e,
  beforeEval: n,
  beforeStart: s,
  afterEval: r,
  getTime: o,
  transpiler: i,
  onToggle: u,
  editPattern: a,
  onUpdateState: p,
  sync: m = false,
  setInterval: y,
  clearInterval: _,
  id: w
}) {
  const b = {
    schedulerError: void 0,
    evalError: void 0,
    code: "// LOADING",
    activeCode: "// LOADING",
    pattern: void 0,
    miniLocations: [],
    widgets: [],
    pending: false,
    started: false
  }, O = {
    id: w
  }, x = (v) => {
    Object.assign(b, v), b.isDirty = b.code !== b.activeCode, b.error = b.evalError || b.schedulerError, p == null ? void 0 : p(b);
  }, I = {
    onTrigger: _u({ defaultOutput: t, getTime: o }),
    getTime: o,
    onToggle: (v) => {
      x({ started: v }), u == null ? void 0 : u(v);
    },
    setInterval: y,
    clearInterval: _,
    beforeStart: s
  }, M = m && typeof SharedWorker < "u" ? new wu(I) : new bu(I);
  let z = {}, P2 = 0, D, G;
  const Bt = function() {
    return z = {}, P2 = 0, D = void 0, G = void 0, q;
  }, Ot = async (v, k = true) => (v = (a == null ? void 0 : a(v)) || v, await M.setPattern(v, k), v);
  Rt(() => M.now());
  const pe = () => M.stop(), fe = () => M.start(), he = () => M.pause(), de = () => M.toggle(), lt = (v) => M.setCps(v), zt = (v) => M.setCps(v / 60), me = function(v) {
    return D = v, q;
  }, ye = function(v) {
    return G = v, q;
  }, ge = () => {
    f.prototype.p = function(k) {
      return typeof k == "string" && (k.startsWith("_") || k.endsWith("_")) ? q : (k === "$" && (k = `$${P2}`, P2++), z[k] = this, this);
    }, f.prototype.q = function(k) {
      return q;
    };
    try {
      for (let k = 1; k < 10; ++k)
        Object.defineProperty(f.prototype, `d${k}`, {
          get() {
            return this.p(k);
          },
          configurable: true
        }), Object.defineProperty(f.prototype, `p${k}`, {
          get() {
            return this.p(k);
          },
          configurable: true
        }), f.prototype[`q${k}`] = q;
    } catch (k) {
      console.warn("injectPatternMethods: error:", k);
    }
    const v = l("cpm", function(k, pt) {
      return pt._fast(k / 60 / M.cps);
    });
    return mu({
      all: me,
      each: ye,
      hush: Bt,
      cpm: v,
      setCps: lt,
      setcps: lt,
      setCpm: zt,
      setcpm: zt
    });
  };
  return { scheduler: M, evaluate: async (v, k = true, pt = true) => {
    if (!v)
      throw new Error("no code to evaluate");
    try {
      x({ code: v, pending: true }), await ge(), Rt(() => M.now()), await (n == null ? void 0 : n({ code: v })), pt && Bt();
      let { pattern: B, meta: ft } = await gu(v, i, O);
      if (Object.keys(z).length) {
        let X = Object.values(z);
        G && (X = X.map((we) => G(we))), B = C(...X);
      } else G && (B = G(B));
      if (D && (B = D(B)), !Dt(B)) {
        const X = `got "${typeof evaluated}" instead of pattern`;
        throw new Error(X + (typeof evaluated == "function" ? ", did you forget to call a function?" : "."));
      }
      return E("[eval] code updated"), B = await Ot(B, k), x({
        miniLocations: (ft == null ? void 0 : ft.miniLocations) || [],
        widgets: (ft == null ? void 0 : ft.widgets) || [],
        activeCode: v,
        pattern: B,
        evalError: void 0,
        schedulerError: void 0,
        pending: false
      }), r == null ? void 0 : r({ code: v, pattern: B, meta: ft }), B;
    } catch (B) {
      E(`[eval] error: ${B.message}`, "error"), console.error(B), x({ evalError: B, pending: false }), e == null ? void 0 : e(B);
    }
  }, start: fe, stop: pe, pause: he, setCps: lt, setPattern: Ot, setCode: (v) => x({ code: v }), toggle: de, state: b };
}
var _u = ({ getTime: t, defaultOutput: e }) => async (n, s, r, o, i) => {
  try {
    (!n.context.onTrigger || !n.context.dominantTrigger) && await e(n, s, r, o, i), n.context.onTrigger && await n.context.onTrigger(t() + s, n, t(), o, i);
  } catch (u) {
    E(`[cyclist] error: ${u.message}`, "error");
  }
};
var Ef = function(t, e = {}) {
  const n = document.getElementById("code"), s = "background-image:url(" + t + ");background-size:contain;";
  n.style = s;
  const { className: r } = n, o = (a, p) => {
    ({
      style: () => n.style = s + ";" + p,
      className: () => n.className = p + " " + r
    })[a]();
  }, i = Object.entries(e).filter(([a, p]) => typeof p == "function");
  Object.entries(e).filter(([a, p]) => typeof p == "string").forEach(([a, p]) => o(a, p)), i.length;
};
var Mf = () => {
  const t = document.getElementById("code");
  t && (t.style = "");
};
E("🌀 @strudel/core loaded 🌀");
globalThis._strudelLoaded && console.warn(
  `@strudel/core was loaded more than once...
This might happen when you have multiple versions of strudel installed. 
Please check with "npm ls @strudel/core".`
);
globalThis._strudelLoaded = true;

export {
  Lt,
  E,
  Au,
  wt,
  _e,
  ct,
  tt,
  qe,
  Su,
  Tu,
  Ae,
  Cu,
  ut,
  Te,
  Ce,
  xu,
  Bu,
  Ou,
  xe,
  Be,
  zu,
  nt,
  Q,
  Z,
  Eu,
  Wt,
  g,
  Ht,
  It,
  N,
  Oe,
  Mu,
  Ft,
  Vt,
  ze,
  Ee,
  Ju,
  ju,
  Pu,
  Re,
  Le,
  We,
  Nu,
  $u,
  He,
  Jt,
  Ie,
  Ru,
  Ve,
  De,
  h,
  T,
  S,
  et,
  Ue,
  Lu,
  Wu,
  f,
  Hu,
  Iu,
  Fu,
  st,
  q,
  $,
  j,
  Dt,
  d,
  Ze,
  C,
  tn,
  en,
  nn,
  Vu,
  K,
  Gt,
  sn,
  Du,
  Gu,
  W,
  V,
  rn,
  Qu,
  Uu,
  Ku,
  Xu,
  Yu,
  Zu,
  ta,
  ea,
  na,
  sa,
  ra,
  oa,
  ia,
  ca,
  ua,
  aa,
  la,
  pa,
  fa,
  ha,
  da,
  ma,
  ya,
  ga,
  wa,
  ba,
  _a,
  va,
  ka,
  qa,
  Aa,
  Sa,
  Ta,
  Ca,
  xa,
  l,
  Ba,
  Oa,
  za,
  Ea,
  Ma,
  Ja,
  ja,
  Pa,
  Na,
  $a,
  Ra,
  La,
  Wa,
  Ha,
  Ia,
  Fa,
  Va,
  Da,
  Ga,
  Ua,
  Ka,
  Xa,
  Ya,
  Za,
  tl,
  el,
  nl,
  sl,
  rl,
  ol,
  on,
  il,
  cl,
  ul,
  al,
  ll,
  pl,
  fl,
  hl,
  dl,
  ml,
  yl,
  gl,
  wl,
  bl,
  cn,
  _l,
  vl,
  kl,
  ql,
  Al,
  Sl,
  Tl,
  Cl,
  xl,
  Bl,
  Ol,
  zl,
  El,
  Ml,
  Jl,
  jl,
  Pl,
  Nl,
  $l,
  Rl,
  Ll,
  Wl,
  Hl,
  Il,
  Fl,
  Vl,
  Dl,
  Gl,
  Ql,
  Ul,
  Kl,
  jt,
  Pt,
  un,
  an,
  ln,
  pn,
  kt,
  J,
  fn,
  hn,
  dn,
  mn,
  yn,
  gn,
  wn,
  bn,
  Xl,
  _n,
  vn,
  Yl,
  kn,
  Zl,
  tp,
  ep,
  np,
  sp,
  rp,
  op,
  ip,
  cp,
  up,
  ap,
  lp,
  pp,
  fp,
  hp,
  qn,
  dp,
  mp,
  yp,
  gp,
  wp,
  bp,
  _p,
  An,
  vp,
  qt,
  c,
  Tn,
  Cn,
  xn,
  Bn,
  On,
  zn,
  En,
  Mn,
  Jn,
  jn,
  Pn,
  Nn,
  $n,
  Rn,
  Ln,
  Wn,
  Hn,
  In,
  Fn,
  Vn,
  Dn,
  Gn,
  Qn,
  Un,
  Kn,
  Xn,
  Yn,
  Zn,
  ts,
  es,
  ns,
  ss,
  rs,
  os,
  is,
  cs,
  us,
  as,
  ls,
  ps,
  fs,
  hs,
  ds,
  ms,
  ys,
  gs,
  ws,
  bs,
  _s,
  vs,
  ks,
  qs,
  As,
  Ss,
  Ts,
  Cs,
  xs,
  Bs,
  Os,
  zs,
  Es,
  Ms,
  Js,
  js,
  Ps,
  Ns,
  $s,
  Rs,
  Ls,
  Ws,
  Hs,
  Is,
  Fs,
  Vs,
  Ds,
  Gs,
  Qs,
  Us,
  Ks,
  Xs,
  Ys,
  Zs,
  tr,
  er,
  nr,
  sr,
  rr,
  or,
  ir,
  cr,
  ur,
  ar,
  lr,
  pr,
  fr,
  hr,
  dr,
  mr,
  yr,
  gr,
  wr,
  br,
  _r,
  vr,
  kr,
  qr,
  Ar,
  Sr,
  Tr,
  Cr,
  xr,
  Br,
  Or,
  zr,
  Er,
  Mr,
  Jr,
  jr,
  Pr,
  Nr,
  $r,
  Rr,
  Lr,
  Wr,
  Hr,
  Ir,
  Fr,
  Vr,
  Dr,
  Gr,
  Qr,
  Ur,
  Kr,
  Xr,
  Yr,
  Zr,
  to,
  eo,
  no,
  so,
  ro,
  oo,
  io,
  co,
  uo,
  ao,
  lo,
  po,
  fo,
  ho,
  mo,
  yo,
  go,
  wo,
  bo,
  _o,
  vo,
  ko,
  qo,
  Ao,
  So,
  To,
  Co,
  xo,
  Bo,
  Oo,
  zo,
  Eo,
  Mo,
  Jo,
  jo,
  Po,
  No,
  $o,
  Ro,
  Lo,
  Wo,
  Ho,
  Io,
  Fo,
  Vo,
  Do,
  Go,
  Qo,
  Uo,
  Ko,
  Xo,
  Yo,
  Zo,
  ti,
  ei,
  ni,
  si,
  ri,
  oi,
  ii,
  ci,
  ui,
  ai,
  li,
  pi,
  Ut,
  fi,
  hi,
  di,
  mi,
  yi,
  wi,
  bi,
  _i,
  vi,
  ki,
  qi,
  Ai,
  Si,
  Ti,
  Ci,
  xi,
  Bi,
  Oi,
  zi,
  Ei,
  Mi,
  Ji,
  ji,
  Pi,
  Ni,
  $i,
  Ri,
  Li,
  Wi,
  Hi,
  Ii,
  Fi,
  Vi,
  Di,
  Gi,
  Qi,
  Ui,
  Ki,
  Xi,
  Yi,
  Zi,
  tc,
  ec,
  nc,
  sc,
  rc,
  oc,
  ic,
  cc,
  uc,
  ac,
  lc,
  pc,
  fc,
  hc,
  dc,
  mc,
  yc,
  gc,
  wc,
  bc,
  _c,
  vc,
  kc,
  qc,
  Ac,
  Sc,
  Tc,
  Cc,
  xc,
  Bc,
  Oc,
  zc,
  Ec,
  Mc,
  Jc,
  jc,
  Pc,
  Nc,
  $c,
  Rc,
  Lc,
  Wc,
  Hc,
  Ic,
  Fc,
  Kt,
  Vc,
  Dc,
  kp,
  Uc,
  qp,
  Ap,
  Sp,
  Tp,
  Cp,
  Kc,
  xp,
  H,
  at,
  Zt,
  St,
  te,
  ee,
  Xc,
  Bp,
  Op,
  Yc,
  zp,
  Ep,
  Mp,
  Jp,
  jp,
  Zc,
  Pp,
  Np,
  $p,
  Rp,
  su,
  Lp,
  ru,
  ou,
  Wp,
  Hp,
  L,
  Ip,
  ie,
  Fp,
  Vp,
  ce,
  Dp,
  ue,
  xt,
  iu,
  Gp,
  cu,
  Qp,
  Up,
  au,
  Kp,
  lu,
  Xp,
  Yp,
  Zp,
  tf,
  ef,
  nf,
  sf,
  rf,
  of,
  cf,
  uf,
  af,
  lf,
  pf,
  ff,
  hf,
  le,
  df,
  mf,
  pu,
  hu,
  yf,
  gf,
  wf,
  bf,
  _f,
  vf,
  kf,
  qf,
  Af,
  Sf,
  Tf,
  Cf,
  xf,
  Bf,
  mu,
  gu,
  bu,
  Of,
  Rt,
  zf,
  _u,
  Ef,
  Mf,
  dist_exports
};
//# sourceMappingURL=chunk-X2KHC3MF.js.map
